[commit]
  gpgsign = true
[core]
  editor = $EDITOR
  pager = less
  excludesfile = ~/.gitignore
[status]
  submoduleSummary = true
[diff]
  submodule = log
#so much color
[color]
  ui = auto
[color "diff"]
  meta = yellow bold
  commit = green bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

# git mergetool
[merge]
  tool = opendiff
  renameLimit = 0
# use separate file for username / github token
[include]
  path = ~/.gitconfig.local

[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true

[fetch]
  prune = true
[diff]
  compactionHeuristic = true
	context = 5
[difftool]
  prompt = false
[stash]
  showPatch = true
[push]
  default = current
[github]
  user = kronolynx
# [interactive]
#   diffFilter = delta --color-only
[alias]
  #all = "!f() { ls -d */ | xargs -I{} git -C {} $1; }; f" # git all "checkout master" | git all pull
  all = "!f() { ls -d */ | xargs -I@ bash -c \"echo -e '\n** @' && git -C @ $1\"; }; f" # git all "checkout master" | git all pull
  amend = commit --amend --no-edit
  amend-stage = commit --amend -C HEAD # quick amend: Amend my staged changes to the last commit, keeping the same commit message
  amendAdd = commit --amend --no-edit -a
  branch-name = "!git rev-parse --abbrev-ref HEAD" # Get the current branch name (not so useful in itself, but used in other aliases)
  # a = add -A
  c = commit
  s = status -s
  d = diff
  dc = diff --cached
  ds = diff --staged
  ck = checkout
  ckb = checkout -b
  ckm = checkout master
  ckdel = "!f() { curBranch=$(git branch-name); git cku $1 && git del ${curBranch}; }; f"
  ckre = "!f() { git fetch $2 && git ckb $1 $2/$3; }; f" # checkout remote branch e.g. git ckre new-branch-name remote-name remote-branch-name
  ckup = "!f() { git ckre $1 upstream master; }; f" # checkout new branch from upstream master e.g. git ckup new-branch-name
  cleanloc = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"  # delete branches merged into master
  cleanrem = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git push origin --delete"
  clonerec = "!f() { git clone --recursive $1; }; f"
  cm = commit -m
  cam = commit -am
  count = "!git ls-files | xargs wc -l"
  cw = "!f() { git commit -m \"WIP $1\"; }; f" # prepend WIP to commit message
  dt = difftool # example git d HEAD~2 # to diff the current index with 2 commits ago
  delb = branch -D #delete specified branch e.g. git del test-branch
  diffc = diff --cached
  diffs = diff --staged
  fu = fetch upstream
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  i = "!git add -i"
  ignore = "!f() { git update-index --assume-unchanged $1; }; f" # stop tracking file for changes
  initc = "!git init && git add -A && git commit -m 'Initial commit'" # Init git and add initial commit with all the files, add gitignore first to ignore files
  join = "!git st; git reset --soft HEAD~1 && git commit --amend -a; git pop" # join last head and previous commit
  lo = log --oneline
  l1 = log -1
  l2 = log -2
  l3 = log -3
  l4 = log -4
  l5 = log -5
  l6 = log -6
  lo1 = log -1 --oneline
  lo2 = log -2 --oneline
  lo3 = log -3 --oneline
  lo4 = log -4 --oneline
  lo5 = log -5 --oneline
  lo6 = log -6 --oneline
  lg = log --graph --all --decorate --oneline -36
  la = "!git config -l | grep alias | cut -c 7-" # list aliases
  ls = branch -v # list branches
  lsr = remote -v # list remotes
  ls-stash="!git stash list | awk -F: '{ print "\n\n\n\n"; print $0; print "\n\n"; system("git stash show -p " $1); }'"
  mema ="!f() { git ck master && git merge --ff-only $1 && git push origin master && git branch -d $1 && git push origin --delete $1;}; f" # merge branch into master and push then clean
  mem ="!f() { git ck master && git merge --ff-only $1 && git push origin master && git push origin --delete $1;}; f" # merge branch into master and push then clean
  mecuma ="!git mema $(git branch-name)" # merge current branch into master and push then clean
  #meup ="!f() {git branch | grep \* | cut -d ' ' -f2 | xargs git push upstream $1:master; }; f"
  meup ="!git push upstream $(git branch-name):master && git pod" # merge to upstream current branch
  mv = git branch -m # <oldname> <newname>
  p = push
  pdiff = diff @~..@
  pf = push -f
  po = "!git push -u origin $(git branch-name)" # push to origin
  pof = "!git push -u origin $(git branch-name) --force-with-lease" # push to origin
  poff = "!git push -u origin $(git branch-name) -f" # push to origin
  pod = "!git push origin --delete $(git branch-name)" # delete origin
  pom = "!git fetch && git pull origin master"
  pop = stash pop
  pr = pull --rebase
  prom = pull --rebase origin master
  prum = pull --rebase upstream master
  pullall = submodule update --recursive --remote
  pullsub = submodule update --recursive
  rc = rebase --continue
  reb = "!f() { git rebase $1 -s recursive -X ours; }; f" # the branch must be specified e.g. upstream/master # ours in this case means the changes that are not in the curren branch (inverse)
  reom = reset --hard origin/master
  resetfile = checkout HEAD -- # <file-path>  reset file to HEAD
  ri = rebase -i # commit ref to start (not included) or HEAD~# where # is the number of commits to rebase/squash
  rim = rebase -i upstream/master
  ru = rebase upstream/master
  s = status
  set-remote = remote set-url origin # add all changes including untracked files and creates commit
  spull = !git pull && git submodule foreach git pull origin master
  spush = push --recurse-submodules=on-demand
  staged = diff --staged
  st = stash
  stap = stash apply
  stsa = stash save
  stls = stash list
  stpa = stash --patch # partial stash
  stsh = stash show # show latest stash
  stbr = stash branch # <branch_name> <stash_id>
  stdr = stash drop # <stash_id>
  stcl = stash clear # caution deletes all stashes
  unapp = "!git stash show -p | git apply -R" # undo the last stash apply
  undo = reset HEAD~1 --mixed # undo previous commit but keep all the changes in the working directory
  undo-commit = reset --soft HEAD~1
  unignore = "!f() { git update-index --no-assume-unchanged $1; }; f" # resume tracking file  for changes
  unstage = reset HEAD
  wipa = !git add -A && git commit -m 'WIP (save all changes)' # commits tracked changes
  wips = commit -am "WIP (save staged changes)"
#  cleanr = "!git branch -r --merged | grep -v '\\*\\|master\\|develop' | sed 's/origin\///' | xargs -n 1 git push --delete origin"
[gpg]
  program = /usr/bin/gpg2 # to stop asking each time for gpg password
[init]
  defaultBranch = main
[includeIf "gitdir:~/Workspace/Work"]
  path = ~/Workspace/Work/.gitconfig
