" vim: fdm=marker foldenable sw=4 ts=4 sts=4
" "zo" to open folds, "zc" to close, "zn" to disable.
" Begin .vimrc
"color molokai
" leader {{{
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "
let g:mapleader = " "
" }}}

" Set stuff {{{
syntax enable
syntax on
if has ("autocmd")
  filetype plugin on                  " for netrw
  " File type detection. Indent based on filetype. Recommended.
  filetype plugin indent on
endif
"set guifont=DroidSansMono\ Nerd\ Font\ 11
set nocompatible              " be iMproved, required

" autosave
:au FocusLost * silent! :wa

" copy to clipboard
set clipboard+=unnamedplus
" indentation
set autoindent      "Keep indentation from previous line
set expandtab " Expand tabs to spaces
set shiftround "When shifting lines, round the indentation to the nearest multiple of “shiftwidth.
set shiftwidth=2   "Indent by 2 spaces when using >>, <<, == etc.
set softtabstop=2  "Indent by 2 spaces when pressing <TAB>
set smartindent     "Automatically inserts indentation in some cases"

" seach
set hlsearch " Highlight searches
set ignorecase " Ignore case of searches
set incsearch " Highlight dynamically as pattern is typed
set smartcase " if search has uppercase then use case sensitive search

" format
set formatoptions+=1 " Break before 1-letter words        "
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=c " Format comments
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=n " Recognize numbered lists
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=r " Continue comments by default

" performance
set lazyredraw " Don’t update screen during macro and script execution.

" text rendering
set display+=lastline " Always try to show a paragraph’s last line.
set encoding=utf-8 nobomb " BOM often causes trouble  BOM( byte order mark)
set linebreak " Avoid wrapping a line in the middle of a word.
set scrolloff=7 " The number of screen lines to keep above and below the cursor.
set sidescrolloff=5 " The number of screen columns to keep to the left and right of the cursor.
set wrap " Enable line wrapping.

" interface
set background=dark " Use colors that suit a dark background.
set cmdheight=1 " Height of the command bar
set colorcolumn=+1 " Make it obvious where 80 characters is
set cursorline " Highlight current line
set guifont=FantasqueSansMono\ Nerd\ Font\ 11
set laststatus=2 " Always show the status line
set mouse=a " Enable mouse for scrolling and resizing.
set noerrorbells " Disable beep on errors.
set nostartofline " Don’t reset cursor to start of line when moving around.
set nu " line number
set ruler "Always show current position
set shortmess=atI " Don’t show the intro message when starting Vim
set showcmd " Show the (partial) command as it’s being typed
set showmatch " Show matching brackets when text indicator is over them
set t_Co=256 " Use 256 colours (Use this setting only if your terminal supports 256 colours)
set tabpagemax=50 " Maximum number of tab pages that can be opened from the command line.
set textwidth=80 " Make it obvious where 80 characters is
set noshowmode " lightline shows the status not vim

" folding
set foldmethod=syntax " Syntax are used to specify folds
set foldminlines=0 " Allow folding single lines
set foldnestmax=5 " Set max fold nesting level "
set nofoldenable " disable folding
set foldcolumn=0 " Column to show folds

" diff
set diffopt+=iwhite " Ignore whitespace changes (focus on code changes)
set diffopt=filler " Add vertical spaces to keep right and left aligned

" misc
set autoread " Set to auto read when a file is changed from the outside
au FocusGained,BufEnter * checktime " for autoread
set autowrite     " Automatically :write before running commands
set backspace=indent,eol,start " Allow backspacing over indention, line breaks and insertion start.
set complete+=i,b "word completion  "kspell for current language
set completeopt=menu,menuone,preview,noselect,noinsert
set confirm " Display a confirmation dialog when closing an unsaved file.
set hidden " Hide files in the background instead of closing them
set history=1000 " Increase history from 20 default to 1000
set iskeyword+=:
set magic " For regular expressions turn magic on
set matchpairs+=<:> " match between a pair of characters with % " to add more separate with , and add : between the characters
set nomodeline " Ignore file’s mode lines; use vimrc configurations instead.
set noswapfile
set path+=** " Provides tab-completion for all file-related tasks (Search down into subfolders)
set wildmenu " Enhance command-line completion

" " automatically leave insert mode after 'updatetime' milliseconds of inaction
" au CursorHoldI * stopinsert

" }}}

" ignore {{{
set wildignore+=.DS_Store
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/node_modules/*
set wildignore+=*/smarty/*,*/vendor/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/doc/*,*/source_maps/*,*/dist/*,*/targer/*
" }}}

if has("nvim") 
  " Realtime preview of substitution
  " set inccommand=nosplit
  set inccommand=split
endif

command! Vimrc :vs $MYVIMRC

" Plugins -------------------------------------------------------------

" install vim plug if not installed
if has('nvim')
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !echo '[Downloading vim-plug for neovim] ...'
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !echo '[Downloading vim-plug for vim] ...'
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif


" Load plugins {{{
call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'ctrlpvim/ctrlp.vim' " fuzzy file finder :CtrlP :CtrlPBuffer :CtrlPMixed
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " installs fzf
Plug 'junegunn/fzf.vim' " fuzy finder :FZF :Files :GFiles :Buffers
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
Plug 'neomake/neomake'
Plug 'rhysd/git-messenger.vim'
Plug 'ryanoasis/vim-devicons' " should load after nerdTree and lightline
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tpope/vim-fugitive' " git wrapper :GCommit, :Gpush, :Gpull :Gblame :Gdiff :Git add %
Plug 'yuttie/comfortable-motion.vim'
Plug 'kana/vim-textobj-user'" required by kana/vim-textobj-entire
" shared with intellij
Plug 'preservim/nerdtree'
Plug 'easymotion/vim-easymotion' " <leader><leader>w|b|W|B|e|E
Plug 'kana/vim-textobj-entire' " ae, ie
Plug 'tpope/vim-surround' " ys, cs, ds , S
Plug 'terryma/vim-multiple-cursors' " <A-n>, <A-x>, <A-p>, g<A-n>
Plug 'tpope/vim-commentary' " gcc, gc + motion, v_gc
Plug 'vim-scripts/ReplaceWithRegister' " gr, grr
Plug 'vim-scripts/argtextobj.vim' "  aa, ia
Plug 'tommcdo/vim-exchange' " cx, cxx, X, cxc
Plug 'machakann/vim-highlightedyank'
Plug 'dbakker/vim-paragraph-motion'
"   _____ _
"  |_   _| |__   ___ _ __ ___   ___  ___
"    | | | '_ \ / _ \ '_ ` _ \ / _ \/ __|
"    | | | | | |  __/ | | | | |  __/\__ \
"    |_| |_| |_|\___|_| |_| |_|\___||___/
"
Plug 'ayu-theme/ayu-vim'
Plug 'challenger-deep-theme/vim'
Plug 'dracula/vim'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'frazrepo/vim-rainbow'
Plug 'joshdick/onedark.vim'
Plug 'rakr/vim-two-firewatch'
Plug 'sainnhe/lightline_foobar.vim'
Plug 'tomasr/molokai'
if has("nvim") 
  Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
else
  Plug 'ghifarit53/tokyonight-vim'
endif

call plug#end()
" }}}


" custom keybindings {{{
" repeat last macro
nnoremap Q @@ 
" delete something without clobbering my unnamed register
nnoremap <leader>dd "_d

" Let me explain, this remap while in visual mode
" will delete what is currently highlighted and replace it
" with what is in the register BUT it will YANK (delete) it
" to a VOID register. Meaning I still have what I originally had
" when I pasted. I don't loose the previous thing I YANKED!
vnoremap <leader>p "_dP

" Run the current line as if it were a command. Often more convenient than q: when experimenting.
nnoremap <leader>ee :exe getline(line('.'))<cr>
"
" " easy clipboard copy/paste {{{  disabled, unnamed already do this
" noremap <leader>y "*y
" noremap <leader>Y "*Y
" noremap <leader>p "*p
" noremap <leader>P "*P
" " }}}
"
" search {{
noremap <leader>gf :FZF<CR>
" }}
" tabs {{
" recent files
nnoremap <leader>tr :CtrlPBuffer<CR> 
" }}

" Sudo write
nnoremap <leader>xs :w !sudo tee %<CR>
" Clear last search (,qs)
map <silent> <BS> :nohlsearch<CR>
" Fast saving
nmap <leader>es :w!<cr>
" Yank from cursor to end of line
map Y y$
" save
map <C-s> <esc>:w!<cr>
" escape
:imap jj <Esc>
:vmap uu <Esc>
" Change selected text from NameLikeThis to name_like_this.
"vnoremap <leader>sc :s/\<\@!\([A-Z]\)/\_\l\1/g<CR>gul
" }}}

" windows {{{
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


map <A-,> :vertical res -5<cr>
map <A-.> :vertical res +5<cr>
map <A-lt> :res -5<cr>
map <A->> :res +5<cr>

" When vimwindow is resized resize splits
au VimResized * exe "normal! \<c-w>="
" }}}

" tabs {{{
"map <leader>te :tabedit
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>
map <leader>tn :tabnew<cr>
" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader><tab> :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" }}}

" buffers {{{
" next buffer
nnoremap <A-l> :bnext<cr>
" previous buffer
nnoremap <A-h> :bprevious<cr>
" Close the current buffer
map <leader>bd :bd<cr>
" Close all the buffers
map <leader>ba :bufdo bd<cr>
" nextm previos buffer
map <leader>bn :bnext<cr>
map <leader>bp :bprevious<cr>
" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>
" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>
" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry
" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" }}}
"


"
" Language server {{{

" Quickfix
nnoremap <silent> <UP> :cope<CR>
nnoremap <silent> <DOWN> :cclose<CR>
nnoremap <silent> <leader>cn :cnext<CR>
nnoremap <silent> <leader>cp :cprev<CR>
nnoremap <silent> <RIGHT> :cnext<CR>
nnoremap <silent> <LEFT> :cprev<CR>
" }}}
"
" Make many of the jump commands also center on search term
nnoremap n nzz
nnoremap N Nzz
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz
nnoremap * *zz
nnoremap # #zz
" This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

" Terminal {{{
" set zsh if available
if executable ('/usr/bin/fish')
  set shell=/usr/bin/fish
elseif executable ('/usr/bin/zsh')
  set shell=/usr/bin/zsh
endif
" open terminal
nnoremap <M-s> :te<cr>
" }}}

" spellcheck {{{
autocmd BufRead COMMIT_EDITMSG setlocal spell spelllang=en_us
" set spell checking for markdown and latex
" to change the language :spelllang=es || :spelllang=en_us
autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown set spell spelllang=en_us
autocmd BufNewFile,BufRead *.tex set spell spelllang=en_us
" to keep the custom words synchronized
set spellfile=$HOME/Dropbox/vim/spell/en.utf-8.add
set spellfile=$HOME/Dropbox/vim/spell/es.utf-8.add
" }}}

" Local directories {{{
set backup
if !isdirectory($HOME."/.vim/backupdir")
    call mkdir($HOME."/.vim/backupdir", "p")
endif
set backupdir=~/.vim/backupdir

if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "p")
endif
set undodir=~/.vim/undo
set undofile " Persistent Undo
" }}}

" Auto commands {{{
augroup autosourcing
  autocmd!
  " source vim on save
  autocmd BufWritePost .vimrc source %
augroup end
" }}}

" Helper functions {{{
" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" }}}

" ctags {{{
" Create the `tags` file (may need to install ctags first)
command! MakeTags !ctags -R .
" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
" }}}

" File browsing {{{
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
" }}}


"

" vim rainbow global
let g:rainbow_active = 1

" {{{ nerd tree
map <M-1> :NERDTreeToggle<CR>

" if last window open is nerd tree close vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1 " enable folder glyph flag
let g:webdevicons_enable_ctrlp = 1
" Force extra padding in NERDTree so that the filetype icons line up vertically
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ' '
let g:DevIconsDefaultFolderOpenSymbol = ' '
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1

let g:NERDTreeHighlightFoldersFullName = 1

" Basically disable nerdtree markers
let g:NERDTreeDirArrowExpandable = ' '
let g:NERDTreeDirArrowCollapsible = ' '


let NERDTreeStatusline="%8*%=%7*NERD%8*%="
" }}}

" ctrlp {{
"  Put ctrl p at the bottom ordererf from top to bottom
let g:ctrlp_match_window='bottom,order:ttb,min:1,max:20,results:20'
" use rg as our ctrlp finder
let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
" rg is fast enough we don't need no stinking cache
let g:ctrlp_use_caching=0
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" }}

" theme {{{
function! FileNameWithIcon() abort
  return winwidth(0) > 70  ?  WebDevIconsGetFileTypeSymbol() . ' ' . expand('%:t') : ''
endfunction

function! FileNameWithParent(f) abort
  if expand('%:t') ==# ''
    return expand('%:p:h:t')
  else
    return expand('%:p:h:t') . "/" . expand("%:t")
  endif
endfunction

function! Git_branch() abort
  if fugitive#head() !=# ''
    return  fugitive#head() . " "
  else
    return "\uf468"
  endif
endfunction

let g:lightline = {}
let g:lightline.active = {
      \ 'left': [ ['mode', 'readonly'], ['filename_with_icon', 'modified']],
      \ 'right': [['lineinfo'], ['testing_status'] ]
      \ }
let g:lightline.separator = { 'left': " ", 'right': " " }
let g:lightline.tabline_separator = { 'left': " ", 'right': "" }
let g:lightline.tabline_subseparator = { 'left': "/", 'right': "/" }
let g:lightline.subseparator = { 'left': '\\', 'right': '\\' }

let g:lightline.tabline = {
            \ 'left': [ [ 'vim_logo'], [ 'tabs' ] ],
            \ 'right': [ [ 'git_branch' ]]
            \ }
let g:lightline.tab = {
        \ 'active': ['filename_with_parent'],
        \ 'inactive': ['filename']
        \ }

let g:lightline.tab_component = {}
let g:lightline.tab_component_function = {
            \ 'artify_filename': 'lightline_tab_filename',
            \ 'filename': 'lightline#tab#filename',
            \ 'modified': 'lightline#tab#modified',
            \ 'readonly': 'lightline#tab#readonly',
            \ 'tabnum': 'lightline#tab#tabnum',
            \ 'filename_with_parent': 'FileNameWithParent'
            \ }

let g:lightline.component = {
        \ 'filename_with_icon': '%{FileNameWithIcon()}',
        \ 'vim_logo': "\ue7c5 ",
        \ 'git_branch': '%{Git_branch()}',
        \ 'filename_with_parent': '%t',
        \ 'status_diagnostic': '%{StatusDiagnostic()}'
        \ }

"
" Dynamically switch color scheme and have things respect it
function SwitchColorScheme(name)
  let g:VIM_COLOR_SCHEME = a:name
  call ColorScheme()
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction

function! ColorScheme()
  if g:VIM_COLOR_SCHEME ==# 'palenight'
    " Lazy load theme in
    let g:palenight_terminal_italics=1
    colorscheme palenight
    let g:lightline.colorscheme = 'palenight_alter'
  endif

  if g:VIM_COLOR_SCHEME ==# 'dracula'
    set background=dark
    colorscheme dracula
    let g:lightline.colorscheme = 'dracula'
  endif

  if g:VIM_COLOR_SCHEME ==# 'ayu-light'
    let g:ayucolor="light"
    set background=light
    colorscheme ayu
    let g:lightline.colorscheme = 'ayu_light'
  endif

  if g:VIM_COLOR_SCHEME ==# 'ayu-mirage'
    set background=dark
    let g:ayucolor="mirage"
    colorscheme ayu

    let g:lightline.colorscheme = 'ayu_mirage'
  endif

  if g:VIM_COLOR_SCHEME ==# 'ayu-mirage'
    set background=dark
    let g:ayucolor="mirage"
    colorscheme ayu

    let g:lightline.colorscheme = 'ayu_mirage'
  endif

  if g:VIM_COLOR_SCHEME ==# 'tokyonight'
    set background=dark
    let g:tokyonight_style = "night"
    if has("nvim") 
      let g:tokyonight_italic_functions = 1
      let g:tokyonight_transparent = 1
      let g:tokyonight_transparent_sidebar = 1
    else
      let g:tokyonight_transparent_background = 1
      let g:tokyonight_enable_italic = 1
    endif
    let g:lightline.colorscheme = 'tokyonight'
    colorscheme tokyonight
  endif

endfunction

" The Defaults

:call SwitchColorScheme('tokyonight')
" }}}

" whichkey {{{
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
set timeoutlen=500
let g:which_key_map =  {}

let g:which_key_map['w'] = {
      \ 'name' : '+windows' ,
      \ 'w' : ['<C-W>w'     , 'other-window']          ,
      \ 'd' : ['<C-W>c'     , 'delete-window']         ,
      \ '-' : ['<C-W>s'     , 'split-window-below']    ,
      \ '|' : ['<C-W>v'     , 'split-window-right']    ,
      \ '2' : ['<C-W>v'     , 'layout-double-columns'] ,
      \ 'h' : ['<C-W>h'     , 'window-left']           ,
      \ 'j' : ['<C-W>j'     , 'window-below']          ,
      \ 'l' : ['<C-W>l'     , 'window-right']          ,
      \ 'k' : ['<C-W>k'     , 'window-up']             ,
      \ 'H' : ['<C-W>5<'    , 'expand-window-left']    ,
      \ 'J' : ['resize +5'  , 'expand-window-below']   ,
      \ 'L' : ['<C-W>5>'    , 'expand-window-right']   ,
      \ 'K' : ['resize -5'  , 'expand-window-up']      ,
      \ '=' : ['<C-W>='     , 'balance-window']        ,
      \ 's' : ['<C-W>s'     , 'split-window-below']    ,
      \ 'v' : ['<C-W>v'     , 'split-window-below']    ,
      \ '?' : ['Windows'    , 'fzf-window']            ,
      \ }
" }}}"
"
" supertab {{{
" supertab completions
" This is how I got it so that tabbing moves down the completion list
" from top to bottom instead of upwards
let g:SuperTabMappingForward = '<s-tab>'
let g:SuperTabMappingBackward = '<tab>'
" }}}
"

" File management {{{
"nnoremap <silent><leader>\ :NERDTreeToggle<CR>
"nnoremap <silent><leader>p :CtrlP<CR>
"nnoremap <silent><leader>b :CtrlPBuffer<CR>
"" }}}

" Comment {{
vnoremap <M-/> :Commentary<CR>j
nnoremap <M-/> V:Commentary<CR>j
" }}

"" fuzzyfinder {{
nnoremap <C-p> :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \}
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
" {{
