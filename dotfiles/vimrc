" Begin .vimrc
color molokai
set nocompatible              " be iMproved, required
filetype plugin on                  " required
set encoding=utf8
"set guifont=DroidSansMono\ Nerd\ Font\ 11
set guifont=SauceCodePro\ Nerd\ Font\ 11
" leader {{{
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "
let g:mapleader = " "
" }}}
set noswapfile
set mouse=a
" autosave
:au FocusLost * :wa

map <F6> :setlocal spell! spelllang=en_us<CR>

"inoremap <leader><leader> <Esc>/<++><Enter>"_c4l

" Plugins -------------------------------------------------------------

" Load plugins {{{
call plug#begin('~/.vim/plugged')
"
" " Snippets are separated from the engine. Add this if you want them:
" All of your Plugins must be added before the following line
" All plugins must be below this line
" Note: for neovim must run 'pip install neovim'
" Track the engine.
" requires nerd font
" requires pip install websocket-client sexpdata
", { 'on':  'NERDTreeToggle' }
"Plug 'SirVer/ultisnips'
"Plug 'Townk/vim-autoclose'
"Plug 'benmills/vimux'
"Plug 'derekwyatt/vim-scala',  {'for': ['scala','sc']}
"Plug 'ensime/ensime-vim',  {'for': ['scala','sc']}
"Plug 'gerw/vim-latex-suite', { 'for': 'tex' }
"Plug 'honza/vim-snippets'
"Plug 'lervag/vimtex'
"Plug 'neomake/neomake'
"Plug 'racer-rust/vim-racer', {'for': ['rs']}
"Plug 'rust-lang/rust.vim', {'for': ['rs']}
"Plug 'scrooloose/syntastic'
"Plug 'valloric/youcompleteme'
"Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }
"neomake replaces syntastic
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'chiel92/vim-autoformat'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dhruvasagar/vim-table-mode'
Plug 'easymotion/vim-easymotion'
Plug 'ervandew/supertab'
Plug 'flazz/vim-colorschemes'
Plug 'godlygeek/tabular'
Plug 'junegunn/vim-easy-align'
Plug 'kien/rainbow_parentheses.vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'majutsushi/tagbar'
Plug 'mattn/gist-vim' "https://github.com/mattn/gist-vim
Plug 'mattn/webapi-vim'
Plug 'mbbill/undotree'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline-themes'
call plug#end()
" }}}

" plugin variables  {{{
" detect filetype from the filename for gist
let g:gist_detect_filetype = 1
" disable autclose
let g:autoclose_on = 0
" disable polyglot latex
let g:polyglot_disabled = ['latex']
" set vimtex pdf viewer
let g:vimtex_view_method = 'zathura'
" open neomake automatically
"let g:neomake_open_list = 2
" When writing a buffer call neomake
"call neomake#configure#automake('w')
" }}}

"  plugin keybindings {{{
"  autoformat file
noremap <F3> :Autoformat<CR>
"easy align
" https://vimawesome.com/plugin/vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"Open nerd tree
map <leader>nt :NERDTreeToggle<CR>
" Open automatically nerdtree if no file is open
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" undotree
nnoremap <F5> :UndotreeToggle<cr>

" Turn tags
nmap <F8> :TagbarToggle<CR>

" }}}

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" custom keybindings {{{
" prepend space
nnoremap <leader>ii i<space><esc>
" apend space
nnoremap <leader>aa a<space><esc>
" preprend new line
nmap <S-Enter> O<esc>j
" append new line
nmap <CR> o<esc>k
" Clear last search (,qs)
map <silent> <BS> :nohlsearch<CR>
" save on escape not working  :(
inoremap <CAPSLOCK> <CAPSLOCK>:w<CR>
" Fast saving
nmap <leader>fs :w!<cr>
" indent current line
noremap <leader>in v=
" indent current line in visual mode
vnoremap <leader>in =
" delete all lines
noremap <leader>da :1,$d<cr>
" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
" Yank from cursor to end of line
map Y y$
" copy and paste
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<esc>"+p
imap <C-v> <esc>"+pa
" select all
"map <C-S-A> <esc>ggVG<CR>
" save
map <C-s> <esc>:w!<cr>
" escape
:imap yy <Esc>
" Change selected text from NameLikeThis to name_like_this.
"vnoremap <leader>sc :s/\<\@!\([A-Z]\)/\_\l\1/g<CR>gul
" }}}

" windows {{{
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" }}}

" tabs {{{
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>tr :tabnext
" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" }}}

" buffers {{{
" Close the current buffer
map <leader>bd :bd<cr>
" Close all the buffers
map <leader>ba :bufdo bd<cr>
" nextm previos buffer
map <leader>bn :bnext<cr>
map <leader>bp :bprevious<cr>
" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>
" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>
" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry
" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" }}}

" Set stuff {{{
syntax on
set number relativenumber
set sw=2
set iskeyword+=:
set t_Co=256 " Use 256 colours (Use this setting only if your terminal supports 256 colours)
set laststatus=2 " Always show the status line
set shiftwidth=4    "Indent by 2 spaces when using >>, <<, == etc.
set softtabstop=4  "Indent by 2 spaces when pressing <TAB>
set autoindent      "Keep indentation from previous line
set smartindent     "Automatically inserts indentation in some cases"
set expandtab " Expand tabs to spaces
set backspace=indent,eol,start
set cursorline " Highlight current line
set diffopt=filler " Add vertical spaces to keep right and left aligned
set diffopt+=iwhite " Ignore whitespace changes (focus on code changes)
set encoding=utf-8 nobomb " BOM often causes trouble     "
set foldcolumn=0 " Column to show folds
"set foldenable " Enable folding
set nofoldenable " disable folding
"set foldlevel=0 " Close all folds by default
set foldmethod=syntax " Syntax are used to specify folds
set foldminlines=0 " Allow folding single lines
set foldnestmax=5 " Set max fold nesting level "
set formatoptions+=c " Format comments
set formatoptions+=r " Continue comments by default
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=n " Recognize numbered lists
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=1 " Break before 1-letter words        "
set history=1000 " Increase history from 20 default to 1000
set hlsearch " Highlight searches
set ignorecase " Ignore case of searches
set smartcase " if search has uppercase then use case sensitive search
set incsearch " Highlight dynamically as pattern is typed
set laststatus=2 " Always show status line
set lazyredraw " Don't redraw when we don't have to      "
set ruler "Always show current position
set cmdheight=2 " Height of the command bar
set hid " A buffer becomes hidden when it is abandoned
set complete+=kspell "word completion
" match between a pair of characters with %
" to add more separate with , and add : between the characters
set matchpairs+=<:>
" }}}

" spellcheck {{{
"
autocmd BufRead COMMIT_EDITMSG setlocal spell spelllang=en_us
" set spell checking for markdown and latex
" to change the language :spelllang=es || :spelllang=en_us
autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown set spell spelllang=en_us
autocmd BufNewFile,BufRead *.tex set spell spelllang=es
" to keep the custom words synchronized
set spellfile=$HOME/Mega/vim/spell/en.utf-8.add
set spellfile=$HOME/Mega/vim/spell/es.utf-8.add
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin Configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ensime {{{
"autocmd BufWritePost *.scala silent :EnTypeCheck
"nnoremap <localleader>tp :EnType<CR>
" jump to definition
"nnoremap <localleader>df :EnDeclaration<CR>
" }}}


" syntastic {{{
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
"
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" }}}

" Rust {{{
"let g:rustfmt_autosave = 1
"set hidden
"let g:racer_cmd = "~/.cargo/bin"
"let g:racer_experimental_completer = 1
""let g:ycm_rust_src_path = "~/.appsc/rust-master/src/"
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
" }}}
"  " Airline.vim {{{
augroup airline_config
  autocmd!
  let g:airline_theme='minimalist'
  let g:airline_powerline_fonts = 1
  let g:airline_enable_syntastic = 1
  let g:airline#extensions#tabline#buffer_nr_format = '%s '
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#fnamecollapse = 0
  let g:airline#extensions#tabline#fnamemod = ':t'
augroup END
" }}}

" latex {{{
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
" }}}


" Powerline
"set rtp+=/usr/share/powerline/bindings/vim/
if has ("autocmd")
  " File type detection. Indent based on filetype. Recommended.
  filetype plugin indent on
endif

" Local directories {{{
set backupdir=~/.vim/backup
"set directory=~/.vim/swaps
set undodir=~/.vim/undo
" }}}

" Auto commands {{{
augroup autosourcing
  autocmd!
  " source vim on save
  autocmd BufWritePost .vimrc source %
augroup end
" }}}
" :W sudo saves the file
" (useful for handling the permission-denied error)
"command W w !sudo tee % > /dev/null

" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction
