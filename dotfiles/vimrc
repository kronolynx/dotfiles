" vim: fdm=marker foldenable sw=4 ts=4 sts=4
" "zo" to open folds, "zc" to close, "zn" to disable.
" Begin .vimrc
"color molokai
" leader {{{
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "
let g:mapleader = " "
" }}}

" Set stuff {{{
syntax enable
syntax on
if has ("autocmd")
  filetype plugin on                  " for netrw
  " File type detection. Indent based on filetype. Recommended.
  filetype plugin indent on
endif
"set guifont=DroidSansMono\ Nerd\ Font\ 11
set nocompatible              " be iMproved, required

" autosave
:au FocusLost * :wa

map <F6> :setlocal spell! spelllang=en_us<CR>

"set foldenable " Enable folding
"set foldlevel=0 " Close all folds by default
set autoindent      "Keep indentation from previous line
set autowrite     " Automatically :write before running commands
set backspace=indent,eol,start
set cmdheight=2 " Height of the command bar
set colorcolumn=+1 " Make it obvious where 80 characters is
set complete+=kspell "word completion
set cursorline " Highlight current line
set diffopt+=iwhite " Ignore whitespace changes (focus on code changes)
set diffopt=filler " Add vertical spaces to keep right and left aligned
set encoding=utf-8 nobomb " BOM often causes trouble     "
set encoding=utf8
set expandtab " Expand tabs to spaces
set foldcolumn=0 " Column to show folds
set foldmethod=syntax " Syntax are used to specify folds
set foldminlines=0 " Allow folding single lines
set foldnestmax=5 " Set max fold nesting level "
set formatoptions+=1 " Break before 1-letter words        "
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=c " Format comments
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=n " Recognize numbered lists
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=r " Continue comments by default
set guifont=SauceCodePro\ Nerd\ Font\ 11
set hid " A buffer becomes hidden when it is abandoned
set history=1000 " Increase history from 20 default to 1000
set hlsearch " Highlight searches
set ignorecase " Ignore case of searches
set incsearch " Highlight dynamically as pattern is typed
set incsearch " Highlight dynamically as pattern is typed
set iskeyword+=:
set laststatus=2 " Always show the status line
set lazyredraw " Don't redraw when we don't have to      "
set matchpairs+=<:> " match between a pair of characters with % " to add more separate with , and add : between the characters
set mouse=a " Enable mouse in all modes
set nofoldenable " disable folding
set nostartofline " Don’t reset cursor to start of line when moving around.
set noswapfile
set number relativenumber
set path+=** " Provides tab-completion for all file-related tasks (Search down into subfolders)
set ruler "Always show current position
set shiftround
set shiftwidth=2   "Indent by 2 spaces when using >>, <<, == etc.
set shortmess=atI " Don’t show the intro message when starting Vim
set showcmd " Show the (partial) command as it’s being typed
set smartcase " if search has uppercase then use case sensitive search
set smartindent     "Automatically inserts indentation in some cases"
set softtabstop=2  "Indent by 2 spaces when pressing <TAB>
set sw=2
set t_Co=256 " Use 256 colours (Use this setting only if your terminal supports 256 colours)
set textwidth=80 " Make it obvious where 80 characters is
set title " Show the filename in the window titlebar
set undofile " Persistent Undo
set wildmenu " Enhance command-line completion
" }}}

" ignore {{{
set wildignore+=.DS_Store
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/node_modules/*
set wildignore+=*/smarty/*,*/vendor/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/doc/*,*/source_maps/*,*/dist/*,*/targer/*
" }}}

" easy clipboard copy/paste {{{
noremap <leader>y "*y
noremap <leader>Y "*Y
noremap <leader>p "*p
noremap <leader>P "*P
" }}}

" custom keybindings {{{
" Sudo write 
nnoremap <leader>W :w !sudo tee %<CR>
" prepend space
nnoremap <leader>ii i<space><esc>
" apend space
nnoremap <leader>aa a<space><esc>
" preprend new line
nmap <S-Enter> O<esc>j
" append new line
nmap <CR> o<esc>k
" Clear last search (,qs)
map <silent> <BS> :nohlsearch<CR>
" save on escape not working  :(
inoremap <CAPSLOCK> <CAPSLOCK>:w<CR>
" Fast saving
nmap <leader>ss :w!<cr>
" indent current line
noremap <leader>in v=
" indent current line in visual mode
vnoremap <leader>in =
" delete all lines
noremap <leader>da :1,$d<cr>
" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
" Yank from cursor to end of line
map Y y$
" copy and paste
"vmap <C-c> "+yi
"vmap <C-x> "+c
"vmap <C-v> c<esc>"+p
"imap <C-v> <esc>"+pa
" select all
"map <C-S-A> <esc>ggVG<CR>
" save
map <C-s> <esc>:w!<cr>
" escape
:imap yy <Esc>
" Change selected text from NameLikeThis to name_like_this.
"vnoremap <leader>sc :s/\<\@!\([A-Z]\)/\_\l\1/g<CR>gul
" }}}

" windows {{{
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" }}}

" tabs {{{
"map <leader>te :tabedit
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>
map <leader>tn :tabnew<cr>
" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" }}}

" buffers {{{
" next buffer
nnoremap <A-l> :bnext<cr>
" previous buffer
nnoremap <A-h> :bprevious<cr>
" Close the current buffer
map <leader>bd :bd<cr>
" Close all the buffers
map <leader>ba :bufdo bd<cr>
" nextm previos buffer
map <leader>bn :bnext<cr>
map <leader>bp :bprevious<cr>
" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>
" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>
" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry
" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" }}}

" Terminal {{{
" set zsh if available
if executable ('/usr/bin/zsh')
  set shell=/usr/bin/zsh
endif
" open terminal
nnoremap <A-s> :te<cr> 
" }}}

" spellcheck {{{
autocmd BufRead COMMIT_EDITMSG setlocal spell spelllang=en_us
" set spell checking for markdown and latex
" to change the language :spelllang=es || :spelllang=en_us
autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown set spell spelllang=en_us
autocmd BufNewFile,BufRead *.tex set spell spelllang=en_us
" to keep the custom words synchronized
set spellfile=$HOME/Dropbox/vim/spell/en.utf-8.add
set spellfile=$HOME/Dropbox/vim/spell/es.utf-8.add
" }}}

" Local directories {{{
set backupdir=~/.vim/backup
" set directory=~/.vim/swaps
set undodir=~/.vim/undo
" }}}

" Auto commands {{{
augroup autosourcing
  autocmd!
  " source vim on save
  autocmd BufWritePost .vimrc source %
augroup end
" }}}

" Helper functions {{{
" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

if filereadable(expand("~/.vim/bundles"))
  source ~/.vim/bundles
endif
" }}}

" ctags {{{
" Create the `tags` file (may need to install ctags first)
command! MakeTags !ctags -R .  
" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
" }}}

" File browsing {{{
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
" }}}

" Templates {{{
nnoremap ,sh :-1read $HOME/.vim/templates/script<CR>
nnoremap ,html :-1read $HOME/.vim/templates/html<CR>3jwf>a
" }}}
