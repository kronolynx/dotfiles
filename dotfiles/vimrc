" vim: fdm=marker foldenable sw=4 ts=4 sts=4
" "zo" to open folds, "zc" to close, "zn" to disable.
" Begin .vimrc
"color molokai
" leader {{{
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "
let g:mapleader = " "
" }}}

" Set stuff {{{
syntax enable
syntax on
if has ("autocmd")
  filetype plugin on                  " for netrw
  " File type detection. Indent based on filetype. Recommended.
  filetype plugin indent on
endif
"set guifont=DroidSansMono\ Nerd\ Font\ 11
set nocompatible              " be iMproved, required

" autosave
:au FocusLost * :wa


" indentation
set autoindent      "Keep indentation from previous line
set expandtab " Expand tabs to spaces
set shiftround "When shifting lines, round the indentation to the nearest multiple of “shiftwidth.
set shiftwidth=2   "Indent by 2 spaces when using >>, <<, == etc.
set softtabstop=2  "Indent by 2 spaces when pressing <TAB>
set smartindent     "Automatically inserts indentation in some cases"

" seach
set hlsearch " Highlight searches
set ignorecase " Ignore case of searches
set incsearch " Highlight dynamically as pattern is typed
set smartcase " if search has uppercase then use case sensitive search

" format
set formatoptions+=1 " Break before 1-letter words        "
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=c " Format comments
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=n " Recognize numbered lists
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=r " Continue comments by default

" performance
set lazyredraw " Don’t update screen during macro and script execution.

" text rendering
set display+=lastline " Always try to show a paragraph’s last line.
set encoding=utf-8 nobomb " BOM often causes trouble  BOM( byte order mark)
set linebreak " Avoid wrapping a line in the middle of a word.
set scrolloff=1 " The number of screen lines to keep above and below the cursor.
set sidescrolloff=5 " The number of screen columns to keep to the left and right of the cursor.
set wrap " Enable line wrapping.

" interface
set background=dark " Use colors that suit a dark background.
set cmdheight=2 " Height of the command bar
set colorcolumn=+1 " Make it obvious where 80 characters is
set cursorline " Highlight current line
set guifont=SauceCodePro\ Nerd\ Font\ 11
set laststatus=2 " Always show the status line
set mouse=a " Enable mouse for scrolling and resizing.
set noerrorbells " Disable beep on errors.
set nostartofline " Don’t reset cursor to start of line when moving around.
set number relativenumber " sidebar numbersShow line numbers on the sidebar.
set ruler "Always show current position
set shortmess=atI " Don’t show the intro message when starting Vim
set showcmd " Show the (partial) command as it’s being typed
set showmatch " Show matching brackets when text indicator is over them
set t_Co=256 " Use 256 colours (Use this setting only if your terminal supports 256 colours)
set tabpagemax=50 " Maximum number of tab pages that can be opened from the command line.
set textwidth=80 " Make it obvious where 80 characters is

" folding
set foldmethod=syntax " Syntax are used to specify folds
set foldminlines=0 " Allow folding single lines
set foldnestmax=5 " Set max fold nesting level "
set nofoldenable " disable folding
set foldcolumn=0 " Column to show folds

" diff
set diffopt+=iwhite " Ignore whitespace changes (focus on code changes)
set diffopt=filler " Add vertical spaces to keep right and left aligned

" misc
set autoread " Set to auto read when a file is changed from the outside
au FocusGained,BufEnter * checktime " for autoread
set autowrite     " Automatically :write before running commands
set backspace=indent,eol,start " Allow backspacing over indention, line breaks and insertion start.
set complete+=i,b "word completion  "kspell for current language
set confirm " Display a confirmation dialog when closing an unsaved file.
set hidden " Hide files in the background instead of closing them
set history=1000 " Increase history from 20 default to 1000
set iskeyword+=:
set magic " For regular expressions turn magic on
set matchpairs+=<:> " match between a pair of characters with % " to add more separate with , and add : between the characters
set nomodeline " Ignore file’s mode lines; use vimrc configurations instead.
set noswapfile
set path+=** " Provides tab-completion for all file-related tasks (Search down into subfolders)
set wildmenu " Enhance command-line completion
" }}}

" ignore {{{
set wildignore+=.DS_Store
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/node_modules/*
set wildignore+=*/smarty/*,*/vendor/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/doc/*,*/source_maps/*,*/dist/*,*/targer/*
" }}}

" easy clipboard copy/paste {{{
noremap <leader>y "*y
noremap <leader>Y "*Y
noremap <leader>p "*p
noremap <leader>P "*P
" }}}

" custom keybindings {{{
" Sudo write 
nnoremap <leader>xs :w !sudo tee %<CR>
" Clear last search (,qs)
map <silent> <BS> :nohlsearch<CR>
" Fast saving
nmap <leader>es :w!<cr>
" Yank from cursor to end of line
map Y y$
" save
map <C-s> <esc>:w!<cr>
" escape
:imap yy <Esc>
" Change selected text from NameLikeThis to name_like_this.
"vnoremap <leader>sc :s/\<\@!\([A-Z]\)/\_\l\1/g<CR>gul
" }}}

" windows {{{
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" }}}

" tabs {{{
"map <leader>te :tabedit
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>
map <leader>tn :tabnew<cr>
" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader><tab> :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" }}}

" buffers {{{
" next buffer
nnoremap <A-l> :bnext<cr>
" previous buffer
nnoremap <A-h> :bprevious<cr>
" Close the current buffer
map <leader>bd :bd<cr>
" Close all the buffers
map <leader>ba :bufdo bd<cr>
" nextm previos buffer
map <leader>bn :bnext<cr>
map <leader>bp :bprevious<cr>
" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>
" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>
" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry
" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" }}}

"This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

" Terminal {{{
" set zsh if available
if executable ('/usr/bin/zsh')
  set shell=/usr/bin/zsh
endif
" open terminal
nnoremap <A-s> :te<cr> 
" }}}

" spellcheck {{{
autocmd BufRead COMMIT_EDITMSG setlocal spell spelllang=en_us
" set spell checking for markdown and latex
" to change the language :spelllang=es || :spelllang=en_us
autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown set spell spelllang=en_us
autocmd BufNewFile,BufRead *.tex set spell spelllang=en_us
" to keep the custom words synchronized
set spellfile=$HOME/Dropbox/vim/spell/en.utf-8.add
set spellfile=$HOME/Dropbox/vim/spell/es.utf-8.add
" }}}

" Local directories {{{
" if !isdirectory("~/.vim/backupd")
"     call mkdir("~/.vim/backupd", "p")
" endif
" set backupdir=~/.vim/backupd

set backup
if !isdirectory($HOME."/.vim/backupdir")
    call mkdir($HOME."/.vim/backupdir", "p")
endif
set backupdir=~/.vim/backupdir

if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "p")
endif
set undodir=~/.vim/undo
set undofile " Persistent Undo
" }}}

" Auto commands {{{
augroup autosourcing
  autocmd!
  " source vim on save
  autocmd BufWritePost .vimrc source %
augroup end
" }}}

" Helper functions {{{
" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" }}}

" ctags {{{
" Create the `tags` file (may need to install ctags first)
command! MakeTags !ctags -R .  
" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
" }}}

" File browsing {{{
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
" }}}


" Plugins -------------------------------------------------------------

" install vim plug if not installed
if has('nvim')
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !echo '[Downloading vim-plug for neovim] ...'
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs 
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !echo '[Downloading vim-plug for vim] ...'
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs 
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif


" Load plugins {{{
call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'chiel92/vim-autoformat'
Plug 'easymotion/vim-easymotion'
Plug 'mbbill/undotree'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'sheerun/vim-polyglot'
Plug 'terryma/vim-multiple-cursors'
" fugitive git wrapper :GCommit, :Gpush, :Gpull :Gblame :Gdiff :Git add %
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'frazrepo/vim-rainbow'

" fuzy finder :FZF :Files :GFiles :Buffers
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" search :Ack
Plug 'mileszs/ack.vim'
" fuzzy file finder :CtrlP :CtrlPBuffer :CtrlPMixed
Plug 'ctrlpvim/ctrlp.vim'
" C-tags integration --- requires ctags system package :Tagbar
Plug 'majutsushi/tagbar'

" intelligent completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" language support
Plug 'sheerun/vim-polyglot'

" theme
Plug 'joshdick/onedark.vim'
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'
Plug 'itchyny/lightline.vim'
call plug#end()
" }}}
"

" vim rainbow global
let g:rainbow_active = 1
" {{{ nerd tree
map <M-1> :NERDTreeToggle<CR>

" if last window open is nerd tree close vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }}}

nnoremap <F5> :UndotreeToggle<cr>

" Turn tags
nmap <F8> :TagbarToggle<CR>

" theme {{{
try
  "colorscheme solarized
  "colorscheme molokai
  colorscheme onedark
catch
endtry
" }}}

