"actions https://gist.github.com/zchee/9c78f91cc5ad771c1f5d
" :actionlist
" source ~/.vimrc

let mapleader=" "

set history=1000

" copy to clipboard
set clipboard+=unnamedplus

" number of lines above and below the cursor
set scrolloff=7

" Search as characters are entered
set incsearch

" Highlight search results
set hlsearch

" line numbers
set nu

" edit word when renaming instead of replacing by default
set idearefactormode=keep

" If a pattern contains an uppercase letter, searching is case sensitive,
" otherwise, it is not.
set ignorecase
set smartcase

" use vim handlers in normal mode and IDE handlers in insert mode
" https://github.com/JetBrains/ideavim/wiki/sethandler
sethandler n:vim i:ide

"This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

" Plugins {{{
set surround              " Commands: ys, cs, ds, S
set multiple-cursors      " Commands <A-n>, <A-x>, <A-p>, g<A-n>
set commentary            " Commands: gcc, gc + motion, v_gc
set ReplaceWithRegister   " Commands: gr, grr
set exchange              " Commands: cx, cxx, X, cxc
set textobj-entire        " Additional text objects: ae, ie
set easymotion            " Requieres plugins IdeaVim-EasyMotion and AceJump
set highlightedyank       " 
set NERDTree              "
set vim-paragraph-motion  "
set textobj-indent        " Additional text objects: ai, ii, aI
set which-key
" }}}
" Ideavim commands {{{
set ideajoin              " 
set showmode              " message on the status line to show current mode
set showcmd               " show (partial) command in the status bar
set wrapscan              " searches wrap around the end of file

" }}}

" other {{{

vnoremap uu <Esc> 
inoremap jj <Esc> 

let g:WhichKeyDesc_back = "gb Back"
nnoremap gb :action Back<cr>
let g:WhichKeyDesc_forward = "gf Forward"
nnoremap gf :action Forward<cr>

" }}}


" which key {{{
" increase the timeoutlen (default: 1000)
# set timeoutlen = 1
set notimeout
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_SortOrder = "be_key_prefix_first"
let g:WhichKey_KeyStyle = "bold"
let g:WhichKey_KeyColor = "#50fa7b"
let g:WhichKey_PrefixColor = "#ff79c6"
let g:WhichKey_CommandColor = "#8be9fd"
" }}}

" Leader bindings
" tab {{{
let g:WhichKeyDesc_tab = "<leader>t tab"
nnoremap <leader>tc :action CloseContent<cr>
vnoremap <leader>tc <Esc>:action CloseContent<cr>

nnoremap <leader>tf :action FileStructurePopup<cr>
vnoremap <leader>tf <Esc>:action FileStructurePopup<cr>

nnoremap <leader>th :action PreviousTab<cr>
vnoremap <leader>th <Esc>:action PreviousTab<cr>

nnoremap <leader>tl :action NextTab<cr>
vnoremap <leader>tl <Esc>:action NextTab<cr>

nnoremap <leader>ts :action Switcher<cr>
vnoremap <leader>ts <Esc>:action Switcher<cr>

nnoremap <leader>tr :action RecentFiles<cr>
vnoremap <leader>tr <Esc>:action RecentFiles<cr>

nnoremap <leader>tt    :action VimFilePrevious<CR>
vnoremap <leader>tt   <Esc>:action VimFilePrevious<CR>

" duplicate tab opossite group (yank)
nnoremap <leader>tm :action MoveEditorToOppositeTabGroup<cr>
vnoremap <leader>tm <Esc>:action MoveEditorToOppositeTabGroup<cr>

noremap <leader>ty :action OpenEditorInOppositeTabGroup<cr>
vnoremap <leader>ty <Esc>:action OpenEditorInOppositeTabGroup<cr>

" undo (reopen)
nnoremap <leader>tu :action ReopenClosedTab<cr>
nnoremap <leader>tu <Esc>:action ReopenClosedTab<cr>

" cycle tabs
nnoremap <C-s-tab> :action NextTab<cr>
nnoremap <C-tab> :action PreviousTab<cr>

"nnoremap <leader-tab> :action GoToLastTab<cr>
"nnoremap <leader-tab> <Esc>:action GoToLastTab<cr>

" Focus last tab
let g:WhichKeyDesc_last_tab = "<leader><Tab> last tab"
nnoremap <leader><tab>    :action GoToLastTab<CR>
vnoremap <leader><tab>    <Esc>:action GoToLastTab<CR>

" Resize split
map <A-,> :action StretchSplitToLeft<cr>
map <A-.> :action StretchSplitToRight<cr>
map <A-s-,> :action StretchSplitToTop<cr>
map <A-s-.> :action StretchSplitToBottom<cr>

" }}}

" misc {{{
" Greatest remap EVER!! 
" Let me explain, this remap while in visiual mode
" will delete what is currently highlighted and replace it 
" with what is in the register BUT it will YANK (delete) it 
" to a VOID register. Meaning I still have what I originally had
" when I pasted. I don't loose the previous thing I YANKED!
let g:WhichKeyDesc_paste = "<leader>p paste replace and keep"
vnoremap <leader>p "_dP
" }}}

" yank to end of line
nnoremap Y y$ 

map <A-space> :action GotoAction<cr>
map <A-j> :action GotoAction<cr>

" editor {{{
let g:WhichKeyDesc_editor = "<leader>e editor"

nnoremap <leader>ea :action GotoAction<cr>

nnoremap <leader>eb :action Back<cr>

nnoremap <leader>ef :action Forward<cr>

nnoremap <leader>ec :action CompileProject<cr>

nnoremap <leader>ee :action EvaluateExpression<CR>
vnoremap <leader>ee <Esc>:action EvaluateExpression<CR>

" Insert snippet
nnoremap <leader>es :action InsertLiveTemplate<CR>


nnoremap <leader>en :action EditorGutterToggleGlobalLineNumbers<cr>

" Pasting from yank history
nnoremap <leader>ey :action PasteMultiple<CR>

nnoremap <leader>eo :action OptimizeImports<CR>

nnoremap <leader>e= :action ReformatCode<cr>

" multiple cursors
let g:WhichKeyDesc_multiple_cursors = "<leader>c multiple cursors"
nnoremap <leader>c <A-N>

" Show usages for symbol.
" Ideally this should be FindInPath the current word, but I think that it is
" not possible.
let g:WhichKeyDesc_usages = "<leader>* show usages"
nnoremap <leader>*    :action ShowUsages<CR>
vnoremap <leader>*    <Esc>:action ShowUsages<CR>
" }}}

" view {{{
let g:WhichKeyDesc_view = "<leader>v view"
nnoremap <leader>va :action ShowIntentionActions<CR>

let g:WhichKeyDesc_view_implicits = "<leader>vi implicits"
nnoremap <leader>via :action Scala.ShowImplicitArguments<CR>
vnoremap <leader>via <Esc>:action Scala.ShowImplicitArguments<cr>

nnoremap <leader>vip :action Scala.ShowImplicits<cr>
vnoremap <leader>vip <Esc>:action Scala.ShowImplicits<cr>

nnoremap <leader>vih <Action>(ShowErrorDescription) 
vnoremap <leader>vih <Esc><Action>(ShowErrorDescription) 

nnoremap <leader>vie :action Scala.ExpandImplicits<cr>
vnoremap <leader>vie <Esc>:action Scala.ExpandImplicits<cr>

nnoremap <leader>vp :action ParameterInfo<cr>
vnoremap <leader>vp <Esc>:action ParameterInfo<cr>

" Types vh = view hover
nnoremap <leader>vt :action Scala.TypeInfo<CR> 
vnoremap <leader>vt :action Scala.TypeInfo<CR>

nnoremap <leader>vr :action RecentLocations<cr>

" display variable definition in a popup window
nnoremap <leader>vq :action QuickImplementations<CR> 

" Undo
let g:WhichKeyDesc_view_undo = "<leader>vu undo history"
nnoremap <leader>vu :action LocalHistory.ShowHistory<CR>
" }}}

" refactor {{{
let g:WhichKeyDesc_refactor = "<leader>r refactor"
nnoremap <leader>rm :action ExtractMethod<CR>
nnoremap <leader>rq :action Refactorings.QuickListPopupAction<CR>
nnoremap <leader>rp :action IntroduceParameter<CR>
" inline current variable (opossite of introduce variable)
nnoremap <leader>ri :action Inline<CR>
nnoremap <leader>rv :action IntroduceVariable<CR>
nnoremap <leader>ro :action OverrideMethods<CR>

nnoremap <leader>rr :action RenameElement<cr>
vnoremap <leader>rr <Esc>:action RenameElement<cr>

" remove extra whitespace
let g:WhichKeyDesc_refactor_white = "<leader>rc remove extra white space"
nmap <leader>rc :%s/\s\+$<CR><Paste>
vmap <leader>rc <Esc>:%s/\s\+$<CR><Paste>
" }}}

" ide {{{
let g:WhichKeyDesc_ide = "<leader>i IDE"
nnoremap <leader>ir :action ActivateFileManagerToolWindow<cr>
nnoremap <leader>it :action com.sburlyaev.cmd.plugin.actions.OpenTerminal<cr>
nnoremap <leader>iT :action com.sburlyaev.cmd.plugin.actions.OpenInTerminal<cr>
" Toggle code minimap
let g:WhichKeyDesc_ide_minimap = "<leader>im Toogle minimap"
nmap <Leader>im :action CodeGlance.toggle<CR>
"}}}

" file {{{
let g:WhichKeyDesc_file = "<leader>f file"
" Find file
nnoremap <leader>fe :action <cr>

nnoremap <leader>fu :action <cr>

nnoremap <leader>fl :action Recentfiles<cr>
vnoremap <leader>fl <Esc>:action Recentfiles<cr>

nnoremap <leader>fc :action RecentChangedFiles<cr>

nnoremap <leader>fo :action OpenFile<cr>

" Recent files
nnoremap <leader>fr    :action RecentFiles<CR>

" find in project window
nnoremap <leader>ff    :action SelectInProjectView<CR>

" Rename file
nnoremap <leader>fR    :action RenameFile<CR>

" New file
nnoremap <leader>fN :action NewFile<cr>

" Copy file path
nnoremap <leader>fy    :action CopyPaths<CR>

" }}}

" goto {{{
let g:WhichKeyDesc_goto = "<leader>g goto"
nnoremap <leader>gg :action ActivateProjectToolWindow<cr>

nnoremap <leader>gd :action GotoTypeDeclaration<cr>
vnoremap <leader>gd <Esc>:action GotoTypeDeclaration<cr>

nnoremap <leader>gi :action GotoImplementation<cr>
vnoremap <leader>gi <Esc>:action GotoImplementation<cr>

nnoremap <leader>gs :action GotoSuperMethod<cr>
vnoremap <leader>gs <Esc>:action GotoSuperMethod<cr>

nnoremap <leader>gf :action GotoFile<cr>

nnoremap <leader>gc :action GotoClass<cr>

nnoremap <leader>ga :action GotoAction<cr>

"nnoremap <leader>gt :action GotoTest<cr>
"vnoremap <leader>gt <Esc>:action GotoTest<cr>

nnoremap <leader>gu :action FindUsages<cr>
vnoremap <leader>gu <Esc>:action FindUsages<cr>

" Go to code block start
nnoremap <leader>g[    :action EditorCodeBlockStart<CR>
vnoremap <leader>g[    <Esc>:action EditorCodeBlockStart<CR>

" Go to code block end
nnoremap <leader>g]    :action EditorCodeBlockEnd<CR>
vnoremap <leader>g]    <Esc>:action EditorCodeBlockEnd<CR>

" Go to next change
nnoremap g,    :action JumpToNextChange<CR>
vnoremap g,    :action JumpToNextChange<CR>

" Go to last change
nnoremap g.    :action JumpToLastChange<CR>
vnoremap g.    :action JumpToLastChange<CR>

" }}}

" git (m from magit) {{{
let g:WhichKeyDesc_git = "<leader>m git"
nnoremap <leader>ma :action Git.Add<cr>

nnoremap <leader>mm :action Git.Menu<cr>

nnoremap <leader>mp :action Git.Pull<cr>

nnoremap <leader>mf :action Git.Fetch<cr>

nnoremap <leader>mi :action Git.Init<cr>

nnoremap <leader>ml :action Git.Log<cr>

nnoremap <leader>mu :action Git.Unstash<cr>

" Show local changes window (git status)
nnoremap <leader>mw    :action Vcs.Show.Local.Changes<CR>
nnoremap <leader>md    :action Vcs.Show.Local.Changes<CR>

nnoremap <leader>ms :action Git.Stash<cr>

" }}}

" search {{{
let g:WhichKeyDesc_search = "<leader>s search"
nnoremap <leader>su :action FindUsages<cr>
vnoremap <leader>su <Esc>:action FindUsages<cr>

nnoremap <leader>sp :action FindInPath<cr>

nnoremap <leader>se :action SearchEverywhere<cr>

nnoremap <leader>ss :action Find<cr>

nnoremap <leader>sf :action FindUsagesInFile<cr>
vnoremap <leader>sf <Esc>:action FindUsagesInFile<cr>

" Highlight current symbol. Do it again to toggle highlight.
nnoremap <leader>sh :action HighlightUsagesInFile<CR>
vnoremap <leader>sh <Esc>:action HighlightUsagesInFile<CR>

nnoremap * :action FindWordAtCaret<cr>
vnoremap * <Esc>:action FindWordAtCaret<cr>

" }}}

" window {{{
let g:WhichKeyDesc_window = "<leader>w window"
nnoremap <leader>wc :action CloseContent<cr>
vnoremap <leader>wc <Esc>:action CloseContent<cr>

nnoremap <leader>wo :action CloseAllEditorsButActive<cr>
vnoremap <leader>wo <Esc>:action CloseAllEditorsButActive<cr>

nnoremap <leader>wr :action <cr>

nnoremap <leader>wv :action SplitVertically<cr>
vnoremap <leader>wv <Esc>:action SplitVertically<cr>

nnoremap <leader>ws :action SplitHorizontally<cr>
vnoremap <leader>ws <Esc>:action SplitHorizontally<cr>

" move tab back to main group
nnoremap <leader>wu :action Unsplit<cr>
vnoremap <leader>wu <Esc>:action Unsplit<cr>

" move all tabs back to main group
nnoremap <leader>wa :action UnsplitAll<cr>
vnoremap <leader>wa <Esc>:action UnsplitAll<cr>

nnoremap <leader>wl <C-w>l
nnoremap <leader>wh <C-w>h
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k

noremap  <A-z> :action HideAllWindows<cr>
vnoremap  <A-z> <Esc>:action HideAllWindows<cr>

" noremap  <A-1> :action <cr>
" vnoremap  <A-1> <Esc>:action <cr>
map  <A-2> :action Switcher<cr>

nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-k> <C-w>k

#nnoremap <A-,> :action DecrementWindowWidth<cr>
#vnoremap <A-,> <Esc>:action DecrementWindowWidth<cr>
#
#nnoremap <A-.> :action IncrementWindowWidth<cr>
#vnoremap <A-.> <Esc>:action IncrementWindowWidth<cr>
#
#nnoremap <A-S-,> :action DecrementWindowHeight<cr>
#vnoremap <A-S-,> <Esc>:action DecrementWindowHeight<cr>
#
#nnoremap <A-S-.> :action IncrementWindowHeight<cr>
#vnoremap <A-S-.> <Esc>:action IncrementWindowHeight<cr>

" }}}

" other {{{
" Show key bindings
let g:WhichKeyDesc_helpkey = "<leader>xk Intellij bindings"
nnoremap <leader>xk     :map<CR>
vnoremap <leader>xk     <Esc>:map<CR>

let g:WhichKeyDesc_misc = "<leader>x misc"
" Show kill ring
let g:WhichKeyDesc_kill_ring = "<leader>xy show kill ring"
nnoremap <leader>xy    :action PasteMultiple<CR>

" Transpose characters
let g:WhichKeyDesc_transpose_char = "<leader>xc transpose characters"
nnoremap <leader>xc    xhP
vnoremap <leader>xc    <Esc>xhP

" Delete all spaces except one
nnoremap <leader>xd    wh:action EditorHungryBackSpace<CR>
vnoremap <leader>xd    <Esc>wh:action EditorHungryBackSpace<CR>

" Transpose lines
let g:WhichKeyDesc_transpose_line = "<leader>xl transpose line"
nnoremap <leader>xl    ddkP
vnoremap <leader>xl    <Esc>ddkP

" Toggle Show Whitespaces
nnoremap <leader>xw    :action EditorToggleShowWhitespaces<CR>
vnoremap <leader>xw    <Esc>:action EditorToggleShowWhitespaces<CR>

" Toggle show indent guide
nnoremap <leader>xi    :action EditorToggleShowIndentLines<CR>
vnoremap <leader>xi    <Esc>:action EditorToggleShowIndentLines<CR>


" External GVim
nmap <leader>xv :action Tool_External Tools_gvim<cr>

" Toggle view truncate lines
nnoremap <leader>xg    :action EditorGutterToggleGlobalSoftWraps<CR>
vnoremap <leader>xg    <Esc>:action EditorGutterToggleGlobalSoftWraps<CR>

" Toggle distraction free mode
nnoremap <leader>xf    :action ToggleDistractionFreeMode<CR>
vnoremap <leader>xf    <Esc>:action ToggleDistractionFreeMode<CR>

" Reload .ideavimrc
nnoremap <leader>xR    :source ~/.ideavimrc<CR>
vnoremap <leader>xR    <Esc>:source ~/.ideavimrc<CR>
" open recent project
nnoremap <leader>xr    :action RecentProjectListGroup<CR>
vnoremap <leader>xr    <Esc>:action RecentProjectListGroup<CR>
" open in file manader
nnoremap <leader>xo    :action RevealIn<CR>
vnoremap <leader>xo    <Esc>:action RevealIn<CR>
" Show settings
nnoremap <leader>xs :action ShowSettings<cr>
vnoremap <leader>xs <Esc>:action ShowSettings<cr>

" Increase font size
nnoremap <leader>x+    :action EditorIncreaseFontSize<CR>
vnoremap <leader>x+    <Esc>:action EditorIncreaseFontSize<CR>

" Reset font size
nnoremap <leader>x=    :action EditorResetFontSize<CR>
vnoremap <leader>x=    <Esc>:action EditorResetFontSize<CR>

" Decrease font size
nnoremap <leader>x-    :action EditorDecreaseFontSize<CR>
vnoremap <leader>x-    <Esc>:action EditorDecreaseFontSize<CR>

" Reset font size
nnoremap <leader>x0    :action EditorResetFontSize<CR>
vnoremap <leader>x0    <Esc>:action EditorResetFontSize<CR>

" Show color picker
nnoremap <leader>xc    :action ShowColorPicker<CR>
vnoremap <leader>xc    <Esc>:action ShowColorPicker<CR>
" }}}

" quit {{{
let g:WhichKeyDesc_quit = "<leader>q quit"
" Close project
nnoremap <leader>qq    :action CloseProject<CR>
vnoremap <leader>qq    <Esc>:action CloseProject<CR>

" Exit (close all projects)
nnoremap <leader>qQ    :action Exit<CR>
vnoremap <leader>qQ    <Esc>:action Exit<CR>

" Save all and close project
nnoremap <leader>qs    :action SaveAll<CR>:action CloseProject<CR>
vnoremap <leader>qs    <Esc>:action SaveAll<CR>:action CloseProject<CR>
" }}}

""" todo 
" RevealIn    (opens thunar where the current file is located)
" RevealGroup    (ask what to open where the current file is located):
