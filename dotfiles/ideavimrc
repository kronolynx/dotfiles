"
" Find actions
" :actionlist
" :actionlist [pattern]
" to find actions with mouse
" IdeaVim: track action Ids (found in "Search Everywhere" [double shift] 
" source ~/.vimrc

let mapleader=" "

set history=1000
" copy to clipboard
set clipboard+=unnamedplus
set scrolloff=5 " number of lines above and below the cursor
set incsearch " Search as characters are entered
set ignorecase " Ignore case of searches
set smartcase " no ignore case when pattern is uppercase
set hlsearch " Highlight search results
set nu " line numbers
set showmode " message on the status line to show current mode
set showcmd " show (partial) command in the status bar

" edit word when renaming instead of replacing by default
set idearefactormode=keep
set visualbell " use visual bell instead of beeping
set wrapscan " searches wrap around the end of file


" use vim handlers in normal mode and IDE handlers in insert mode
" https://github.com/JetBrains/ideavim/wiki/sethandler
sethandler a:vim

"This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

sethandler <C-n> a:ide
sethandler <C-p> a:ide
" imap <C-n> <ESC>:action HippieCompletion<CR>a
" imap <C-p> <ESC>:action HippieBackwardCompletion<CR>a

" Plugins {{{
" https://github.com/JetBrains/ideavim/wiki/Emulated-plugins
Plug 'easymotion/vim-easymotion'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-surround' " Commands: ys, cs, ds, S
Plug 'terryma/vim-multiple-cursors' " Commands: <A-n>, <A-x>, <A-p>, g<A-n>
Plug 'tpope/vim-commentary' " Commands: gcc, gc + motion, v_gc
Plug 'vim-scripts/ReplaceWithRegister' " Commands: gr, grr
Plug 'tommcdo/vim-exchange' " Commands: cx, cxx, X, cxc
Plug 'kana/vim-textobj-entire' " Additional text objects: ae, ie
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = "300" " highlight duration in milliseconds
let g:highlightedyank_highlight_color = "rgba(255, 99, 71, 155)"

Plug 'dbakker/vim-paragraph-motion'

" }}}
" Ideavim commands {{{
set ideajoin              " 
set ideamarks             " Sync IJ bookmarks and Vim marks
set sneak                 " enable s S to jump to location like f F
" }}}

" other {{{

inoremap jj <Esc> 

map g; <Action>(JumpToLastChange)
map g, <Action>(JumpToNextChange)

let g:WhichKeyDesc_back = "gb Back"
map gb <Action>(Back)
let g:WhichKeyDesc_forward = "gf Forward"
map gf <Action>(Forward)

map [[ <Action>(MethodUp)
map ]] <Action>(MethodDown)

" }}}


" which key {{{
" increase the timeoutlen (default: 1000)
# set timeoutlen = 1
set which-key
set notimeout
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_SortOrder = "be_key_prefix_first"
let g:WhichKey_KeyStyle = "bold"
let g:WhichKey_KeyColor = "#50fa7b"
let g:WhichKey_PrefixColor = "#ff79c6"
let g:WhichKey_CommandColor = "#8be9fd"
" }}}

" Leader bindings
" tab {{{
let g:WhichKeyDesc_tab = "<leader>t tab"
map <leader>tc <Action>(CloseContent)

map <leader>tf <Action>(FileStructurePopup)

map <leader>th <Action>(PreviousTab)

map <leader>tl <Action>(NextTab)

map <leader>ts <Action>(Switcher)

map <leader>tr <Action>(RecentFiles)

map <leader>tt <Action>(VimFilePrevious)

map <leader>to <Action>(ChangeSplitOrientation)

" duplicate tab opossite group (yank)
map <leader>tm <Action>(MoveEditorToOppositeTabGroup)

map <leader>ty <Action>(OpenEditorInOppositeTabGroup)

map <leader>yt <Action>(OpenEditorInOppositeTabGroup)

" undo (reopen)
map <leader>tu <Action>(ReopenClosedTab)

" cycle tabs
map <C-s-tab> <Action>(NextTab)
map <C-tab> <Action>(PreviousTab)

" open terminal
map <C-t> <Action>(ActivateTerminalToolWindow)

" Focus last tab
let g:WhichKeyDesc_last_tab = "<leader><Tab> last tab"
map <leader><tab> <Action>(GoToLastTab)

" Resize split
map <A-,> <Action>(StretchSplitToLeft)
map <A-.> <Action>(StretchSplitToRight)
map <A-s-,> <Action>(StretchSplitToTop)
map <A-s-.> <Action>(StretchSplitToBottom)
" zoom 
map <A-\> <Action>(MaximizeEditorInSplit)

" }}}

" misc {{{
" Greatest remap EVER!! 
" Let me explain, this remap while in visual mode
" will delete what is currently highlighted and replace it 
" with what is in the register BUT it will YANK (delete) it 
" to a VOID register. Meaning I still have what I originally had
" when I pasted. I don't loose the previous thing I YANKED!
" let g:WhichKeyDesc_paste = "<leader>p paste replace and keep"
vnoremap <leader>p "_dP
" }}}

" yank to end of line
nnoremap Y y$ 

map <A-space> <Action>(GotoAction)
map <A-j> <Action>(GotoAction)
" run {{{ 
let g:WhichKeyDesc_editor = "<leader>action run"

map <leader>af <Action>(RerunFailedTests)
map <leader>ac <Action>(RunClass)
map <leader>ar <Action>(Run)
map <leader>ai  <Action>(InvalidateCaches)
map <leader>ad  <Action>(CompileDirty)

" }}}

" caret {{{
let g:WhichKeyDesc_k = "<leader>k caret"
vmap <leader>ka <Action>(EditorAddCaretPerSelectedLine)
nmap <leader>ka <Action>(EditorCloneCaretBelow)
let g:WhichKeyDesc_ko = "<leader>ko all occurrences"
map <leader>ko <Action>(SelectAllOccurrences)
let g:WhichKeyDesc_kn = "<leader>kn next occurrence"
map <leader>kn <Action>(SelectNextOccurrence)
" }}}

" editor {{{
let g:WhichKeyDesc_editor = "<leader>e editor"

map <leader>ea <Action>(GotoAction)

map <leader>eb <Action>(Back)

map <leader>ef <Action>(Forward)

map <leader>ep <Action>(QuickActions)

"map <leader>ec <Action>(CompileProject)
"map <leader>ec <Action>(CompileDirty)

map <leader>ee <Action>(EvaluateExpression)

map <leader>et <Action>(ExpressionTypeInfo)

map <leader>ed <Action>(Scala.Desugar)

map <leader>ei <Action>(InvertBoolean)

" Insert snippet
map <leader>el <Action>(InsertLiveTemplate)


map <leader>en <Action>(EditorGutterToggleGlobalLineNumbers)

" Pasting from yank history
map <leader>ey <Action>(PasteMultiple)

map <leader>eo <Action>(OptimizeImports)

map <leader>e= <Action>(ReformatCode)

"" multiple cursors
"let g:WhichKeyDesc_multiple_cursors = "<leader>c multiple cursors"
"nnoremap <leader>c <A-N>

" Show usages for symbol.
" Ideally this should be FindInPath the current word, but I think that it is
" not possible.
let g:WhichKeyDesc_usages = "<leader>* show usages"
map <leader>* <Action>(ShowUsages)
" }}}

" view {{{
let g:WhichKeyDesc_view = "<leader>v view"
map <leader>va <Action>(ShowIntentionActions)

let g:WhichKeyDesc_view = "<leader>vi implicits"
map <leader>via <Action>(Scala.ShowImplicitArguments)

map <leader>vis <Action>(Scala.ShowImplicits)


map <leader>vie <Action>(Scala.ExpandImplicits)

map <leader>vp <Action>(ParameterInfo)
map <leader>vu <Action>(ShowUsages)

" Types vt = view hover
map <leader>vt <Action>(Scala.TypeInfo)

map <leader>ve <Action>(ShowErrorDescription)


map <leader>vr <Action>(RecentLocations)

let g:WhichKeyDesc_view_implicits = "<leader>vq quick"
map <leader>vqt <Action>(QuickTypeDefinition)

map <leader>vqj <Action>(QuickJavaDoc)

map <leader>vqp <Action>(QuickPreview)
" display variable definition in a popup window
map <leader>vqi <Action>(QuickImplementations)

" Undo
let g:WhichKeyDesc_view_undo = "<leader>vh undo history"
map <leader>vh <Action>(LocalHistory.ShowHistory)
" }}}

" refactor {{{
let g:WhichKeyDesc_refactor = "<leader>r refactor"
map <leader>rm <Action>(ExtractMethod)
map <leader>rc <Action>(ExtractClass)
map <leader>rf <Action>(ExtractFunction)
map <leader>rs <Action>(ExtractFunctionToScope)
map <leader>rt <Action>(ExtractMethodToolWindow.TreePopup)
map <leader>rq <Action>(Refactorings.QuickListPopupAction)
map <leader>rp <Action>(IntroduceParameter)
" inline current variable (opossite of introduce variable)
map <leader>ri <Action>(Inline)
map <leader>rv <Action>(IntroduceVariable)
map <leader>ro <Action>(OverrideMethods)
map <leader>rk <Action>(Scala.GenerateCompanionObject)

map <leader>rr <Action>(RenameElement)

" remove extra whitespace
let g:WhichKeyDesc_refactor_white = "<leader>rw remove extra white space"
nmap <leader>rw :%s/\s\+$<CR><Paste>
vmap <leader>rw <Esc>:%s/\s\+$<CR><Paste>
" }}}

" ide {{{
let g:WhichKeyDesc_ide = "<leader>i IDE"
map <leader>ir <Action>(ActivateFileManagerToolWindow)

map <leader>it <Action>(com.sburlyaev.cmd.plugin.actions.OpenTerminal)
map <leader>iT <Action>(com.sburlyaev.cmd.plugin.actions.OpenInTerminal)
" Toggle code minimap
let g:WhichKeyDesc_ide_minimap = "<leader>im Toogle minimap"
map <Leader>im <Action>(CodeGlance.toggle)
"}}}

" file {{{
let g:WhichKeyDesc_file = "<leader>f file"

map <leader>fu <Action>(FindUsages)

map <leader>fl <Action>(Recentfiles)

map <leader>fc <Action>(RecentChangedFiles)

map <leader>fo <Action>(OpenFile)

" Recent files
map <leader>fr <Action>(RecentFiles)

" find in project window
map <leader>ff <Action>(SelectInProjectView)

" Rename file
map <leader>fR <Action>(RenameFile)

" New file
map <leader>fN <Action>(NewFile)

" Copy file path
map <leader>fy <Action>(CopyPaths)

" }}}

" goto {{{
let g:WhichKeyDesc_goto = "<leader>g goto"
map <leader>gg <Action>(ActivateProjectToolWindow)

map <leader>gd <Action>(GotoTypeDeclaration)

map <leader>gi <Action>(GotoImplementation)

map <leader>gs <Action>(GotoSuperMethod)

map <leader>gr <Action>(GotoRelated)

map <leader>gf <Action>(GotoFile)

map <leader>gc <Action>(GotoClass)

map <leader>ga <Action>(GotoAction)

map <leader>gu <Action>(FindUsages)

map <leader>gt <Action>(GotoTest)

" Go to code block start
map <leader>g[ <Action>(EditorCodeBlockStart)

" Go to code block end
map <leader>g] <Action>(EditorCodeBlockEnd)

" Go to next change
map g, <Action>(JumpToNextChange)

" Go to last change
map g. <Action>(JumpToLastChange)

" }}}

" git m from magit {{{
let g:WhichKeyDesc_git = "<leader>m git"
map <leader>ma <Action>(Git.Add)

map <leader>mb <Action>(Git.Branches)

map <leader>mc <Action>(Git.Commit.Stage)

map <leader>mm <Action>(Git.Menu)

map <leader>mp <Action>(Git.Pull)

map <leader>mf <Action>(Git.Fetch)

map <leader>mi <Action>(Git.Init)

map <leader>ml <Action>(Git.Log)

map <leader>mu <Action>(Git.Unstash)


map <leader>mh <Action>(Vcs.ShowHistoryForBlock)

" Show localmchanges window (git status)
map <leader>mw <Action>(Vcs.Show.Local.Changes)
map <leader>md <Action>(Vcs.Show.Local.Changes)

map <leader>ms <Action>(Git.Stash)

" }}}

" search {{{
let g:WhichKeyDesc_search = "<leader>s search"
map <leader>su <Action>(FindUsages)

map <leader>sp <Action>(FindInPath)

map <leader>se <Action>(SearchEverywhere)

map <leader>sm <Action>(FindUsagesMenuGroup)

map <leader>ss <Action>(Find)

map <leader>sf <Action>(FindUsagesInFile)

map <leader>sv <Action>(FindSelectionInPath)

map <leader>sx <Action>(XPathView.Actions.FindByExpression)

map <leader>sw <Action>(ActivateFindToolWindow)

" Highlight current symbol. Do it again to toggle highlight.
map <leader>sh <Action>(HighlightUsagesInFile)

map * <Action>(FindWordAtCaret)

" }}}

" window {{{
let g:WhichKeyDesc_window = "<leader>w window"
map <leader>wc <Action>(CloseContent)

map <leader>wo <Action>(CloseAllEditorsButActive)

map <leader>wr <Action>())

map <leader>wv <Action>(SplitVertically)

map <leader>ws <Action>(SplitHorizontally)

" move tab back to main group
map <leader>wu <Action>(Unsplit)

" move all tabs back to main group
map <leader>wa <Action>(UnsplitAll)

nnoremap <leader>wl <C-w>l
nnoremap <leader>wh <C-w>h
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k

map <A-z> <Action>(HideAllWindows)

map <A-2> <Action>(Switcher)

nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-k> <C-w>k

" Increase font size
map <C-S-=> <Action>(EditorIncreaseFontSize)

" Reset font size
map <C-=> <Action>(EditorResetFontSize)

" Decrease font size
map <C--> <Action>(EditorDecreaseFontSize)

" }}}
"
" bookmarks {{{
"
let g:WhichKeyDesc_mnemonic_show = "<leader>n mnemonic"
map <leader>nn <Action>(ShowBookmarks)
map <leader>nf <Action>(GotoNextBookmark)
map <leader>nb <Action>(GotoPreviousBookmark)
map m0 <Action>(ToggleBookmark0)
map m1 <Action>(ToggleBookmark1)
map m2 <Action>(ToggleBookmark2)
map m3 <Action>(ToggleBookmark3)
map m4 <Action>(ToggleBookmark4)
map m5 <Action>(ToggleBookmark5)
map m6 <Action>(ToggleBookmark6)
map m7 <Action>(ToggleBookmark7)
map m8 <Action>(ToggleBookmark8)
map m9 <Action>(ToggleBookmark9)
map ma <Action>(ToggleBookmarkA)
map mb <Action>(ToggleBookmarkB)
map mc <Action>(ToggleBookmarkC)
map md <Action>(ToggleBookmarkD)
map me <Action>(ToggleBookmarkE)
map mf <Action>(ToggleBookmarkF)
map mg <Action>(ToggleBookmarkG)
map mh <Action>(ToggleBookmarkH)
map mi <Action>(ToggleBookmarkI)
map mj <Action>(ToggleBookmarkJ)
map mk <Action>(ToggleBookmarkK)
map ml <Action>(ToggleBookmarkL)
map mm <Action>(ToggleBookmarkM)
map mn <Action>(ToggleBookmarkN)
map mo <Action>(ToggleBookmarkO)
map mp <Action>(ToggleBookmarkP)
map mq <Action>(ToggleBookmarkQ)
map mr <Action>(ToggleBookmarkR)
map ms <Action>(ToggleBookmarkS)
map mt <Action>(ToggleBookmarkT)
map mu <Action>(ToggleBookmarkU)
map mv <Action>(ToggleBookmarkV)
map mw <Action>(ToggleBookmarkW)
map mx <Action>(ToggleBookmarkX)
map my <Action>(ToggleBookmarkY)
map mz <Action>(ToggleBookmarkZ)
map '0 <Action>(GotoBookmark0)
map '1 <Action>(GotoBookmark1)
map '2 <Action>(GotoBookmark2)
map '3 <Action>(GotoBookmark3)
map '4 <Action>(GotoBookmark4)
map '5 <Action>(GotoBookmark5)
map '6 <Action>(GotoBookmark6)
map '7 <Action>(GotoBookmark7)
map '8 <Action>(GotoBookmark8)
map '9 <Action>(GotoBookmark9)
map 'a <Action>(GotoBookmarkA)
map 'b <Action>(GotoBookmarkB)
map 'c <Action>(GotoBookmarkC)
map 'd <Action>(GotoBookmarkD)
map 'e <Action>(GotoBookmarkE)
map 'f <Action>(GotoBookmarkF)
map 'g <Action>(GotoBookmarkG)
map 'h <Action>(GotoBookmarkH)
map 'i <Action>(GotoBookmarkI)
map 'j <Action>(GotoBookmarkJ)
map 'k <Action>(GotoBookmarkK)
map 'l <Action>(GotoBookmarkL)
map 'm <Action>(GotoBookmarkM)
map 'n <Action>(GotoBookmarkN)
map 'o <Action>(GotoBookmarkO)
map 'p <Action>(GotoBookmarkP)
map 'q <Action>(GotoBookmarkQ)
map 'r <Action>(GotoBookmarkR)
map 's <Action>(GotoBookmarkS)
map 't <Action>(GotoBookmarkT)
map 'u <Action>(GotoBookmarkU)
map 'v <Action>(GotoBookmarkV)
map 'w <Action>(GotoBookmarkW)
map 'x <Action>(GotoBookmarkX)
map 'y <Action>(GotoBookmarkY)
map 'z <Action>(GotoBookmarkZ)
" }}}
"
" config {{{
let g:WhichKeyDesc_config = "<leader>c config"
map <leader>cb <Action>(EditorBreadcrumbsSettings)
map <leader>cc <Action>(ChangeColorScheme)
map <leader>cs <Action>(ChangeScheme)
" Show settings
map <leader>cv <Action>(ShowSettings)
" Toggle Show Whitespaces
map <leader>cw <Action>(EditorToggleShowWhitespaces)
" Toggle Show line numbers
map <leader>cl <Action>(EditorGutterToggleGlobalLineNumbers)
" Toggle show indent guide
map <leader>ci <Action>(EditorToggleShowIndentLines)

map <leader>cu <Action>(UIToggleActions)

map <leader>ct <Action>(ToggleTypeHints)

map <leader>ce <Action>(EditorToggleActions)

map <leader>cm <Action>(ViewMainMenu)
" }}}
"
" project {{{
let g:WhichKeyDesc_project = "<leader>q project"
" Close project
map <leader>qq <Action>(CloseProject)
" open recent project
map <leader>qr <Action>(RecentProjectListGroup)
" Exit (close all projects)
map <leader>qQ <Action>(Exit)
" Save all and close project
map <leader>qs <Action>(SaveAll)
" ExternalSystem.RefreshProject ???
map <leader>qf  <Action>(ExternalSystem.RefreshAllProjects)

map <leader>qo <Action>(CloseOtherProjects)
" }}}

" other {{{

" Show kill ring
let g:WhichKeyDesc_kill_ring = "<leader>dy show kill ring"
map <leader>dy <Action>(PasteMultiple)

" Transpose characters
let g:WhichKeyDesc_transpose_char = "<leader>dt transpose characters"
nnoremap <leader>dt xhP

" Transpose lines
let g:WhichKeyDesc_transpose_line = "<leader>dl transpose line"
nnoremap <leader>dl ddkP

" Delete all spaces except one
let g:WhichKeyDesc_delete_spaces = "<leader>ds delete spaces"
map <leader>ds wh<Action>(EditorHungryBackSpace)


let g:WhichKeyDesc_misc = "<leader>x misc"


"Repair stuff
map <leader>xs <Action>(CallSaul) 

" External GVim
map <leader>xv <Action>(Tool_External Tools_gvim)

" Toggle view truncate lines
map <leader>xg <Action>(EditorGutterToggleGlobalSoftWraps)

map <leader>xf <Action>(ToggleDistractionFreeMode)

map <leader>xz <Action>(ToggleZenMode)

" Reload .ideavimrc
nnoremap <leader>xR :source ~/.ideavimrc<CR>

map <leader>xp <Action>(OpenFile)


map <leader>xa <Action>(Performance.ActivityMonitor)

" open in file manager
let g:WhichKeyDesc_xo = "<leader>xo reveal in File Manager"
map <leader>xo <Action>(RevealIn)
" ask what to open where the current file is located
let g:WhichKeyDesc_xa = "<leader>xa reveal in choose"
map <leader>xa <Action>(RevealGroup)


" Reset font size
map <leader>x0 <Action>(EditorResetFontSize)

" Show color picker
" map <leader>x <Action>(ShowColorPicker)

map <leader>z <Action>(HideAllWindows)

" Show key bindings
let g:WhichKeyDesc_helpkey = "<leader>xk Intellij bindings"
nnoremap <leader>xk :map<CR>
" }}}
"
" NerdTree {{{
map <A-1> :NERDTreeToggle<CR>
map <leader>nf :NERDTreeFind<CR>
map <leader>nn :NERDTreeFocus<CR>

" }}}

""" todo 
" EditorReverseLines " reverse line order
" Generate  " implement methods, OverrideMethods, test
" GenerateEquals
" Scala.GenerateEquals
