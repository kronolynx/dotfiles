#################
#  TMUX CONFIG  #
#################

# set prefix
bind-key           C-b
# set-option -g prefix C-space
# bind-key             C-a send-prefix


#############
#  OPTIONS  #
#############

## suggested by neovim
set-option -g focus-events on

# # use vi keys
set-option -gw mode-keys vi

# set bigger history limit
set-option -g history-limit 1000000

# so you don't end up with window numbers like: 0 1 4 5 6
set-option -g renumber-windows on

# mouse support
set-option -g mouse on

# set title
set-option -g set-titles        on
set-option -g set-titles-string '#{?#{==:#{pane_current_path},$HOME},~,#{b:pane_current_path}} - #{pane_current_command}'

# ==================
# {n}vim compability
# MacOS ships with a very old ncurses and terminfo. May need to update terminfo to recognize tmux-256color. 
# https://gist.github.com/bbqtd/a4ac060d6f6b9ea6fe3aabe735aa9d95
set -g default-terminal "tmux-256color"

set-option -ga terminal-overrides '*:Tc,*:RGB,xterm-256color:Smulx=\E[4::%p1%dm'
set-option -ga terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# style of function key sequences
set-window-option -g xterm-keys on

# start window numbers from 1
set-option -g base-index 1

# set escape time so vim is responsive inside tmux
set-option -g escape-time 1


# wrap search
set-option -g wrap-search on

# repeat time
set-option -g repeat-time 700

set-option -g automatic-rename on

set-option -g automatic-rename-format '#{?#{==:#{pane_current_path},$HOME},~,#{b:pane_current_path}} - #{pane_current_command}'

##############
#  BINDINGS  #
##############
# pass keys to programs
set-option -gw xterm-keys on

# clear history
bind -n C-l send-keys C-l \; clear-history

# reload tmux config
bind-key C-r source-file ~/.config/tmux/tmux.conf \; display-message "Reloaded ~/.config/tmux/tmux.conf"

# kill session / window / panel
bind-key C-x send-keys -t ! clear Enter
bind-key C-e send-keys 'C-l'

bind-key C-t new-window
bind-key C-q kill-pane

# rename session / window / panel
bind-key   $ command-prompt -p "Rename session:" -I '#S' 'rename-session %1'
bind-key   r command-prompt -p "Rename window:"  -I '#W' 'rename-window %1'
bind-key   R command-prompt -p "Rename pane:"    -I '#T' 'rename-pane %1'

# create new panes and windows
bind-key C-v split-window -h -c "#{pane_current_path}"
bind-key   v split-window -h
bind-key C-s split-window -v -c "#{pane_current_path}"
bind-key   s split-window -v
bind-key C-t new-window   -a -c "#{pane_current_path}"
bind-key   t new-window

# smart pane switching with awareness of vim splits
# makes ctrl-j and ctrl-k navigate fzf search results when fzf active in pane
# providing the same behavior as ctrl-j and ctrl-k when navigating ctrl-p
# results inside vim.

IS_VIM="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
IS_FZF="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

# switch panes
bind-key -n C-h                   if-shell "${IS_VIM} || ${IS_FZF}" "send-keys C-h" "select-pane -L"
bind-key -n C-j                   if-shell "${IS_VIM} || ${IS_FZF}" "send-keys C-j" "select-pane -D"
bind-key -n C-k                   if-shell "${IS_VIM} || ${IS_FZF}" "send-keys C-k" "select-pane -U"
bind-key -n C-l                   if-shell "${IS_VIM} || ${IS_FZF}" "send-keys C-l" "select-pane -R"

# # switch panes (copy-mode)
bind-key -T copy-mode-vi C-h      if-shell "${IS_VIM} || ${IS_FZF}" "send-keys C-h" "select-pane -L"
bind-key -T copy-mode-vi C-j      if-shell "${IS_VIM} || ${IS_FZF}" "send-keys C-j" "select-pane -D"
bind-key -T copy-mode-vi C-k      if-shell "${IS_VIM} || ${IS_FZF}" "send-keys C-k" "select-pane -U"
bind-key -T copy-mode-vi C-l      if-shell "${IS_VIM} || ${IS_FZF}" "send-keys C-l" "select-pane -R"

bind-key -T copy-mode-vi M-h resize-pane -L 1
bind-key -T copy-mode-vi M-j resize-pane -D 1
bind-key -T copy-mode-vi M-k resize-pane -U 1
bind-key -T copy-mode-vi M-l resize-pane -R 1

# # resize panes
# bind-key -r , resize-pane -L 5
# bind-key -r < resize-pane -R 5
# bind-key -r > resize-pane -D 5
# bind-key -r . resize-pane -U 5

# spread panes out evenly
bind-key = select-layout -E

# change split direction
bind-key V move-pane -h -t '.-'
bind-key S move-pane -v -t '.-'

## Join windows
bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key m command-prompt -p "send pane to:"  "join-pane -t '%%'"
## move pane to window
bind-key b break-pane
bind-key T choose-tree -swZ

# rotate panes
# bind-key C-r rotate-window

# swap panes
# bind-key -r H swap-pane -L
# bind-key -r J swap-pane -D
# bind-key -r K swap-pane -U
# bind-key -r L swap-pane -R

# swap windows
# bind-key -r <   swap-window -s -1 \; previous-window
# bind-key -r >   swap-window -s +1 \; next-window

# swap marked
bind-key M-p swap-pane   \; select-pane -M
bind-key M-w swap-window \; select-pane -M

# switch windows
bind-key p previous-window
bind-key n next-window
  
# control arrow to switch windows
bind-key -n C-Left previous-window
bind-key -n C-Right next-window

# Move window to the left or right (a window is just a tab)
# TODO why ctrl is not working with kitty ??
bind-key -n C-S-Left swap-window -t -1 \;  previous-window
bind-key -n C-S-Right swap-window -t +1 \; next-window

# save buffer to file
bind-key M-s command-prompt -p 'Save history to filename:' -I '~/.tmux_history' 'capture-pane -S - -E - ; save-buffer %1 ; delete-buffer'

# display panes
bind-key C-d display-panes

# toggle status bar
bind-key C-s set-option status

# toggle synchronize
bind-key ^ set-window-option synchronize-panes

bind ^A last-window
bind ^W list-windows
bind w list-windows
bind ^D detach
bind d break-pane # breaks split into new tab
bind * setw synchronize-panes
bind '"' choose-window
bind x swap-pane -D
bind b choose-tree 'break-pane -as "%%"' # bring pane to current window

# # switch session using fzf
bind ^J display-popup -E  "tmux list-sessions | grep -v \"^$(tmux display-message -p '#S')\" | fzf | sed -E 's/:.*$//' | xargs tmux switch-client -t"


###############
#  COPY MODE  #
###############

# set clipboard
set-option -g set-clipboard external

# copy and paste
bind-key C-y copy-mode
bind-key   y copy-mode
bind-key   p paste-buffer

# copy mode bindings
bind-key -T copy-mode-vi v                 send-keys -X begin-selection
bind-key -T copy-mode-vi y                 send-keys -X copy-pipe
bind-key -T copy-mode-vi C-v               send-keys -X rectangle-toggle
bind-key -T copy-mode-vi Space             send-keys -X clear-selection
bind-key -T copy-mode-vi q                 send-keys -X cancel
bind-key -T copy-mode-vi Enter             send-keys -X copy-pipe-and-cancel
# bind-key -T copy-mode-vi Escape            if-shell -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'

# Stay in copy mode when dragging with mouse
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X copy-pipe-no-clear \; send-keys -X clear-selection

# scroll speed
bind-key -T copy-mode-vi WheelUpPane   send-keys -N 3 -X scroll-up
bind-key -T copy-mode-vi WheelDownPane send-keys -N 3 -X scroll-down
bind-key -T copy-mode    WheelUpPane   send-keys -N 3 -X scroll-up
bind-key -T copy-mode    WheelDownPane send-keys -N 3 -X scroll-down


# recording  program output to a log
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

# URL Launcher
bind-key C-u run-shell -b "tmux capture-pane -J -p | grep -oE '(https?):\/\/.*[^>]' | fzf-tmux -d20 --multi --bind alt-a:select-all,alt-d:deselect-all | xargs open"

####################
#  MOUSE BINDINGS  #
####################

bind-key -n DoubleClick1StatusLeft switch-client -n


###############
#  STATUSBAR  #
###############

# --> Catppuccin (Frappe)
thm_bg="#303446"
thm_fg="#c6d0f5"
thm_cyan="#99d1db"
thm_black="#292c3c"
thm_gray="#414559"
thm_magenta="#ca9ee6"
thm_pink="#f4b8e4"
thm_red="#e78284"
thm_green="#a6d189"
thm_yellow="#e5c890"
thm_blue="#8caaee"
thm_orange="#ef9f76"
thm_black4="#626880"


set -g pane-active-border-style fg=$thm_gray
set -g pane-border-style fg=$thm_gray

set -g message-style "bg=$thm_bg,fg=$thm_blue"
set -g mode-style "bg=$thm_pink,fg=$thm_black4"

set -g window-status-current-style "bg=default,fg=$thm_green"
set -g window-status-style "bg=default,fg=$thm_green"
set -g window-status-format '\
#[fg=#{thm_blue},bg=default]\
#[fg=#{thm_bg},bg=#{thm_blue}]#I\
#[fg=#{thm_blue},bg=#{thm_bg}]\
#[fg=#{thm_fg},bg=#{thm_bg}] #W #{?window_zoomed_flag,󰁌 ,#[fg=#{thm_bg},bg=#{thm_bg}]█}\
#[fg=#{thm_bg},bg=default]'
set -g window-status-current-format '\
#[fg=#{thm_pink},bg=default]\
#[fg=#{thm_bg},bg=#{thm_pink}]#I\
#[fg=#{thm_pink},bg=#{thm_bg}]\
#[fg=#{thm_fg},bg=#{thm_bg}] #W #{?window_zoomed_flag,󰁌 ,#[fg=#{thm_bg},bg=#{thm_bg}]█}\
#[fg=#{thm_bg},bg=default]'

set -g status-style "bg=default,fg=$thm_green"
set -g status-right-style "bg=default,fg=$thm_green"
set -g status-left-style "bg=default,fg=$thm_green"
set -g status-right ' '
set -g status-left ' '
set -g status-position top

# only show status bar if there is more then one window
set -g status off
set-hook -g after-new-window      'if "[ #{session_windows} -gt 1 ]" "set status on"'
set-hook -g after-kill-pane       'if "[ #{session_windows} -lt 2 ]" "set status off"'
set-hook -g pane-exited           'if "[ #{session_windows} -lt 2 ]" "set status off"'
set-hook -g window-layout-changed 'if "[ #{session_windows} -lt 2 ]" "set status off"'
