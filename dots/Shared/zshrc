# Check if a command exists
function cm_exists() {
  command -v "$@" > /dev/null 2>&1
}

if cm_exists nvim; then
  export EDITOR=nvim
  alias nn=nvim
  alias no="LSP_ENABLED=false nvim"
fi

## Plugin manager :)
# https://github.com/mattmc3/zsh_unplugged?tab=readme-ov-file#jigsaw-the-humble-plugin-load-function
function plugin-load {
  local repo plugdir initfile initfiles=()
  : ${ZPLUGINDIR:=${ZDOTDIR:-~/.config/zsh}/plugins}
  for repo in $@; do
    plugdir=$ZPLUGINDIR/${repo:t}
    initfile=$plugdir/${repo:t}.plugin.zsh
    if [[ ! -d $plugdir ]]; then
      echo "Cloning $repo..."
      git clone -q --depth 1 --recursive --shallow-submodules \
        https://github.com/$repo $plugdir
    fi
    if [[ ! -e $initfile ]]; then
      initfiles=($plugdir/*.{plugin.zsh,zsh-theme,zsh,sh}(N))
      (( $#initfiles )) || { echo >&2 "No init file '$repo'." && continue }
      ln -sf $initfiles[1] $initfile
    fi
    fpath+=$plugdir
    (( $+functions[zsh-defer] )) && zsh-defer . $initfile || . $initfile
  done
}

## TODO add update function for plugins

ZPLUGINDIR=$HOME/.config/zsh/plugins

plugins=(
  spaceship-prompt/spaceship-prompt
  # deferred
  romkatv/zsh-defer
  mattmc3/zman
  wfxr/forgit
  paulirish/git-open
  olets/zsh-abbr
  zsh-users/zsh-history-substring-search
  zsh-users/zsh-autosuggestions
  zdharma-continuum/fast-syntax-highlighting
)

if [ ! -d "$HOME/.config/fsh" ]; then
  # install catppuccin-frappe theme
  git clone https://github.com/catppuccin/zsh-fsh.git /tmp/zsh-fsh-catppuccin && \
  mkdir -p ~/.config/fsh && \
  cp -v /tmp/zsh-fsh-catppuccin/themes/catppuccin-frappe.ini ~/.config/fsh/ && \
  rm -rf /tmp/zsh-fsh-catppuccin
fi


## Options section
setopt correct                                                  # Auto correct mistakes
setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt appendhistory                                            # Immediately append history instead of overwriting
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus
setopt histignorespace                                         # Ignore command lines with leading spaces
setopt incappendhistory

# Completion.
autoload -Uz compinit && compinit

# TODO check if all this completion stuff is needed
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # case insensitive tab completion

# Speed up autocomplete, force prefix mapping
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)*==34=34}:${(s.:.)LS_COLORS}")';

# zstyle ':completion:*' menu select matcher-list 'm:{a-z}={A-Za-z}'
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
# zstyle ':completion:*' rehash true                              # automatically find new executables in path 
# # zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)
# zstyle ':completion:*' completer _expand _complete _ignored _approximate
# zstyle ':completion:*' menu select=2
# zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
# zstyle ':completion:*:descriptions' format '%U%F{cyan}%d%f%u'

# # partial completion suggestions
# zstyle ':completion:*' list-suffixeszstyle ':completion:*' expand prefix suffix
#
# # color partial completion
# zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==34=00}:${(s.:.)LS_COLORS}")';

# # Speed up completions
# zstyle ':completion:*' accept-exact '*(N)'
# zstyle ':completion:*' use-cache on
# zstyle ':completion:*' cache-path ~/.cache/zcache
#
# zstyle ':autocomplete:tab:*' insert-unambiguous yes
# zstyle ':autocomplete:tab:*' widget-style menu-complete
# zstyle ':autocomplete:*:no-matches-at-all' message 't'

typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[builtin]='fg=blue'
ZSH_HIGHLIGHT_STYLES[alias]='fg=blue'
ZSH_HIGHLIGHT_STYLES[function]='fg=blue'
ZSH_HIGHLIGHT_STYLES[command]='fg=blue'
ZSH_HIGHLIGHT_STYLES[path]='fg=cyan,underline'
ZSH_HIGHLIGHT_STYLES[default]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[autodirectory]='fg=cyan'
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'

plugin-load $plugins
# Remove mode switching delay.
KEYTIMEOUT=5
bindkey -v # enable vi-mode
# required to delete using backspace
bindkey "^H" backward-delete-char
bindkey "^?" backward-delete-char

# run `cat` to see the codes for key pressed

# vi cursor
function zle-keymap-select zle-line-init zle-line-finish {
  case $KEYMAP in
    (vicmd)      echo -ne '\e[2 q' ;; # Block cursor, no blink
    (main|viins) echo -ne '\e[6 q' ;; # Line cursor, no blink
  esac
  zle reset-prompt
  zle -R
}
zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

autoload edit-command-line
zle -N edit-command-line
bindkey -M vicmd '^O' edit-command-line # edit current command with ctrl-o
bindkey -M vicmd '^[v' edit-command-line # edit current command with alt-v
#
## bindkey '^[[1;5D' backward-word # ctrl+left
## bindkey '^[[1;5C' forward-word # ctrl+right

# https://github.com/zdharma-continuum/fast-syntax-highlighting?tab=readme-ov-file#themes 
# set theme : fast-theme XDG:catppuccin-frappe
# list themes : fast-theme -l
# show theme : fast-theme -t catppuccin-frappe

ABBR_USER_ABBREVIATIONS_FILE=$HOME/.config/zsh/abbr.txt

bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# # Bind Ctrl+Space key to accept an autosuggestion.
# bindkey '^@' autosuggest-accept

if [ -d "/opt/homebrew/bin" ]; then
  export PATH="/opt/homebrew/bin:$PATH"
fi

export LC_ALL=en_US.UTF-8
export XDG_CONFIG_HOME="$HOME/.config"
export PATH="$HOME/.local/bin:$PATH"
export KUBECONFIG="$HOME/.kube/config"
export PATH="$GOPATH/bin:$PATH"


if cm_exists fzf; then
  # Set up fzf key bindings and fuzzy completion
  source <(fzf --zsh)
  # --- setup fzf theme ---
  export FZF_DEFAULT_OPTS="\
    --color=bg+:#414559,spinner:#f2d5cf,hl:#e78284 \
    --color=fg:#c6d0f5,header:#e78284,info:#ca9ee6,pointer:#f2d5cf \
    --color=marker:#f2d5cf,fg+:#c6d0f5,prompt:#ca9ee6,hl+:#e78284"
  
  # export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --bind shift-up:preview-up,shift-down:preview-down,ctrl-u:preview-half-page-up,ctrl-d:preview-half-page-down"
  export FZF_DEFAULT_COMMAND="command find -L \$dir -type f 2> /dev/null | sed '1d; s#^\./##'"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  # -- Use fd instead of fzf --
  export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"
  export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
  export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"
fi

export FORGIT_FZF_DEFAULT_OPTS="$FORGIT_FZF_DEFAULT_OPTS --reverse"
export FORGIT_LOG_GRAPH_ENABLE=false

if cm_exists carapace; then
  export CARAPACE_BRIDGES='zsh,bash' # optional
  zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
  zstyle ':completion:*:git:*' group-order 'main commands' 'alias commands' 'external commands'
  source <(carapace _carapace)
fi

if cm_exists zoxide; then
  eval "$(zoxide init zsh)"
fi

# if cm_exists  starship; then
#   eval "$(starship init zsh)"
# fi

if cm_exists tmux && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
   # Start TMUX first; try to reattach a session
   ATTACH_OPT=$(tmux ls | grep -vq attached && echo "attach -d")
   exec eval "tmux $ATTACH_OPT"
fi

## Alias
alias chmox='chmod +x'
alias nf='nvim $(fzf)'
alias nov='neovide --frame=none'
alias g='git'
alias l='lazygit'

alias SZ='source ~/.zshrc'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

if cm_exists eza; then
  alias ls="eza --icons --group-directories-first --color=auto"
fi

## functions

# yazi 
function yy() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# make dir and cd
function md() {
  test -z "$1" && echo mkcd: no path given && return
  test -d "$1" && print "md: Directory $1 already exists"
  mkdir -p "$1" && cd "$1"
}

# cd and ls
function cd() {
  local dir="${1:=$HOME}"
  builtin cd "$dir" && ls
}

# removes commands containing argument from history or the last command
function rmh() {
  if [ $# -eq 0 ]; then
    sed -i '$d' ~/.zhistory # removes current commad
    sed -i '$d' ~/.zhistory # removes last line
  else
    sed -i "/$1/d" ~/.zhistory # removes lines that contain the given argument
    sed -i '$d' ~/.zhistory # removes current commad
  fi
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
